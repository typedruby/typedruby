
#line 1 "cc/lexer.rl"
/*
Copyright (c) 2013-2016 whitequark  <whitequark@whitequark.org>

Parts of the source are derived from ruby_parser:
Copyright (c) Ryan Davis, seattle.rb

This lexer is a rewrite of the original in Ragel/C:
Copyright (c) Charlie Somerville, GitHub

MIT License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


#line 34 "cc/lexer.rl"
/*
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source_buffer.slice(@ts...@te)
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#
*/

#include <ruby_parser/driver.hh>
#include <cassert>


#line 119 "cc/lexer.cc"
static const short _lex_actions[] = {
	0, 1, 0, 1, 24, 1, 25, 1, 
	28, 1, 29, 1, 30, 1, 42, 1, 
	43, 1, 44, 1, 45, 1, 47, 1, 
	48, 1, 49, 1, 50, 1, 51, 1, 
	52, 1, 53, 1, 54, 1, 55, 1, 
	56, 1, 57, 1, 58, 1, 59, 1, 
	60, 1, 61, 1, 62, 1, 63, 1, 
	64, 1, 65, 1, 66, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	78, 1, 79, 1, 80, 1, 82, 1, 
	83, 1, 84, 1, 85, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 1, 95, 1, 96, 1, 
	97, 1, 98, 1, 99, 1, 100, 1, 
	101, 1, 102, 1, 103, 1, 104, 1, 
	105, 1, 106, 1, 107, 1, 108, 1, 
	109, 1, 110, 1, 111, 1, 112, 1, 
	113, 1, 114, 1, 115, 1, 116, 1, 
	120, 1, 121, 1, 122, 1, 123, 1, 
	124, 1, 125, 1, 126, 1, 127, 1, 
	128, 1, 129, 1, 130, 1, 131, 1, 
	132, 1, 133, 1, 134, 1, 135, 1, 
	136, 1, 137, 1, 138, 1, 139, 1, 
	140, 1, 141, 1, 142, 1, 143, 1, 
	144, 1, 145, 1, 146, 1, 147, 1, 
	148, 1, 149, 1, 151, 1, 152, 1, 
	153, 1, 158, 1, 159, 1, 160, 1, 
	161, 1, 162, 1, 163, 1, 164, 1, 
	165, 1, 170, 1, 171, 1, 172, 1, 
	173, 1, 174, 1, 177, 1, 178, 1, 
	179, 1, 180, 1, 183, 1, 184, 1, 
	186, 1, 187, 1, 188, 1, 189, 1, 
	190, 1, 191, 1, 193, 1, 194, 1, 
	197, 1, 198, 1, 199, 1, 200, 1, 
	202, 1, 203, 1, 210, 1, 211, 1, 
	212, 1, 213, 1, 214, 1, 215, 1, 
	216, 1, 217, 1, 218, 1, 219, 1, 
	220, 1, 221, 1, 222, 1, 223, 1, 
	224, 1, 225, 1, 228, 1, 230, 1, 
	231, 1, 235, 1, 238, 1, 239, 1, 
	240, 1, 241, 1, 242, 1, 243, 1, 
	244, 1, 245, 1, 246, 1, 247, 1, 
	248, 1, 249, 1, 251, 1, 252, 1, 
	253, 1, 254, 1, 255, 1, 256, 1, 
	258, 1, 259, 1, 276, 1, 277, 1, 
	278, 1, 279, 1, 280, 1, 281, 1, 
	282, 1, 283, 1, 284, 1, 285, 1, 
	286, 1, 287, 1, 288, 1, 289, 1, 
	291, 1, 292, 1, 293, 1, 295, 1, 
	297, 1, 299, 1, 300, 1, 301, 1, 
	303, 1, 306, 1, 307, 1, 309, 1, 
	310, 1, 311, 1, 312, 1, 313, 1, 
	314, 1, 315, 1, 316, 1, 319, 1, 
	320, 1, 321, 1, 322, 1, 323, 1, 
	324, 1, 325, 1, 326, 1, 327, 1, 
	328, 2, 0, 29, 2, 0, 64, 2, 
	0, 74, 2, 0, 82, 2, 0, 88, 
	2, 0, 93, 2, 0, 98, 2, 0, 
	102, 2, 0, 108, 2, 0, 158, 2, 
	0, 162, 2, 0, 163, 2, 0, 216, 
	2, 0, 220, 2, 0, 317, 2, 0, 
	318, 2, 0, 321, 2, 0, 322, 2, 
	2, 294, 2, 3, 294, 2, 4, 294, 
	2, 6, 296, 2, 7, 296, 2, 8, 
	296, 2, 9, 67, 2, 9, 77, 2, 
	9, 229, 2, 10, 67, 2, 10, 77, 
	2, 10, 229, 2, 11, 67, 2, 11, 
	77, 2, 11, 229, 2, 15, 67, 2, 
	15, 77, 2, 15, 229, 2, 17, 67, 
	2, 17, 77, 2, 17, 229, 2, 18, 
	67, 2, 18, 77, 2, 18, 229, 2, 
	19, 67, 2, 19, 77, 2, 19, 229, 
	2, 20, 67, 2, 20, 77, 2, 20, 
	229, 2, 21, 67, 2, 21, 77, 2, 
	21, 229, 2, 22, 67, 2, 22, 77, 
	2, 22, 229, 2, 23, 67, 2, 23, 
	77, 2, 23, 229, 2, 24, 81, 2, 
	24, 87, 2, 25, 0, 2, 25, 42, 
	2, 25, 43, 2, 25, 44, 2, 25, 
	134, 2, 25, 142, 2, 25, 152, 2, 
	25, 163, 2, 25, 174, 2, 25, 176, 
	2, 25, 193, 2, 25, 200, 2, 25, 
	201, 2, 25, 239, 2, 25, 249, 2, 
	25, 250, 2, 25, 256, 2, 25, 257, 
	2, 25, 307, 2, 25, 308, 2, 25, 
	325, 2, 26, 169, 2, 26, 192, 2, 
	26, 232, 2, 26, 290, 2, 27, 304, 
	2, 28, 29, 2, 29, 0, 2, 29, 
	134, 2, 29, 142, 2, 29, 152, 2, 
	29, 175, 2, 29, 193, 2, 29, 200, 
	2, 29, 239, 2, 29, 249, 2, 29, 
	256, 2, 29, 307, 2, 29, 325, 2, 
	30, 150, 2, 30, 227, 2, 30, 237, 
	2, 30, 312, 2, 31, 150, 2, 31, 
	227, 2, 31, 237, 2, 31, 302, 2, 
	32, 227, 2, 32, 237, 2, 33, 227, 
	2, 33, 237, 2, 34, 227, 2, 34, 
	237, 2, 35, 227, 2, 35, 246, 2, 
	36, 227, 2, 36, 237, 2, 37, 227, 
	2, 38, 298, 2, 39, 168, 2, 39, 
	233, 2, 39, 305, 2, 40, 166, 2, 
	40, 167, 2, 40, 185, 2, 40, 234, 
	2, 40, 303, 2, 41, 304, 2, 45, 
	0, 2, 46, 226, 2, 47, 229, 2, 
	48, 236, 2, 49, 55, 2, 50, 55, 
	2, 51, 55, 2, 52, 55, 2, 53, 
	55, 2, 54, 55, 2, 55, 1, 2, 
	58, 313, 2, 61, 0, 2, 61, 117, 
	2, 61, 118, 2, 61, 119, 2, 61, 
	154, 2, 61, 155, 2, 61, 156, 2, 
	61, 157, 2, 61, 181, 2, 61, 182, 
	2, 61, 195, 2, 61, 196, 2, 61, 
	204, 2, 61, 205, 2, 61, 206, 2, 
	61, 207, 2, 61, 208, 2, 61, 209, 
	2, 61, 260, 2, 61, 261, 2, 61, 
	263, 2, 61, 264, 2, 61, 265, 2, 
	61, 266, 2, 61, 267, 2, 61, 268, 
	2, 61, 269, 2, 61, 271, 2, 61, 
	272, 2, 61, 273, 2, 61, 274, 2, 
	61, 275, 3, 0, 86, 24, 3, 10, 
	12, 67, 3, 10, 12, 77, 3, 10, 
	12, 229, 3, 10, 13, 67, 3, 10, 
	13, 77, 3, 10, 13, 229, 3, 14, 
	13, 67, 3, 14, 13, 77, 3, 14, 
	13, 229, 3, 15, 13, 67, 3, 15, 
	13, 77, 3, 15, 13, 229, 3, 16, 
	12, 67, 3, 16, 12, 77, 3, 16, 
	12, 229, 3, 21, 22, 67, 3, 21, 
	22, 77, 3, 21, 22, 229, 3, 24, 
	23, 67, 3, 24, 23, 77, 3, 24, 
	23, 229, 3, 28, 29, 0, 3, 28, 
	29, 134, 3, 28, 29, 142, 3, 28, 
	29, 152, 3, 28, 29, 175, 3, 28, 
	29, 193, 3, 28, 29, 200, 3, 28, 
	29, 239, 3, 28, 29, 249, 3, 28, 
	29, 256, 3, 28, 29, 307, 3, 28, 
	29, 325, 3, 53, 55, 1, 3, 54, 
	55, 1, 3, 55, 1, 294, 3, 56, 
	5, 296, 3, 57, 5, 296, 3, 61, 
	0, 157, 3, 61, 25, 156, 3, 61, 
	25, 182, 3, 61, 29, 262, 3, 61, 
	43, 155, 3, 61, 48, 207, 3, 61, 
	48, 208, 3, 61, 53, 269, 4, 10, 
	12, 13, 67, 4, 10, 12, 13, 77, 
	4, 10, 12, 13, 229, 4, 16, 12, 
	13, 67, 4, 16, 12, 13, 77, 4, 
	16, 12, 13, 229, 4, 49, 55, 1, 
	294, 4, 50, 55, 1, 294, 4, 51, 
	55, 1, 294, 4, 52, 55, 1, 294, 
	4, 53, 55, 1, 294, 4, 54, 55, 
	1, 294, 4, 61, 25, 43, 155, 4, 
	61, 55, 1, 270, 5, 61, 53, 55, 
	1, 270, 5, 61, 54, 55, 1, 270
	
};

static const short _lex_key_offsets[] = {
	0, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 13, 35, 44, 54, 63, 
	67, 72, 76, 81, 85, 88, 92, 99, 
	102, 104, 105, 110, 115, 124, 146, 155, 
	165, 174, 178, 183, 187, 192, 196, 199, 
	203, 210, 213, 215, 216, 221, 226, 235, 
	257, 266, 276, 285, 307, 316, 326, 335, 
	357, 366, 376, 385, 394, 397, 409, 410, 
	411, 423, 424, 425, 426, 427, 463, 499, 
	512, 525, 538, 551, 564, 577, 590, 604, 
	617, 630, 643, 656, 669, 682, 695, 708, 
	709, 710, 711, 712, 714, 715, 716, 717, 
	718, 719, 720, 721, 722, 738, 739, 755, 
	756, 757, 758, 759, 760, 761, 768, 769, 
	791, 800, 803, 811, 818, 819, 831, 841, 
	842, 844, 845, 847, 856, 858, 862, 867, 
	871, 876, 880, 883, 887, 894, 897, 899, 
	900, 905, 910, 919, 932, 946, 960, 974, 
	988, 1000, 1001, 1002, 1011, 1015, 1017, 1019, 
	1021, 1023, 1032, 1033, 1040, 1047, 1054, 1061, 
	1068, 1075, 1076, 1077, 1083, 1084, 1095, 1099, 
	1099, 1100, 1101, 1102, 1106, 1107, 1108, 1117, 
	1121, 1124, 1133, 1135, 1145, 1145, 1145, 1147, 
	1149, 1149, 1149, 1154, 1154, 1154, 1154, 1159, 
	1160, 1160, 1160, 1160, 1165, 1169, 1174, 1178, 
	1178, 1178, 1182, 1186, 1187, 1192, 1202, 1205, 
	1208, 1211, 1211, 1220, 1229, 1238, 1238, 1248, 
	1258, 1268, 1278, 1288, 1288, 1292, 1296, 1296, 
	1300, 1303, 1315, 1325, 1337, 1349, 1361, 1373, 
	1385, 1397, 1407, 1407, 1419, 1419, 1425, 1425, 
	1431, 1434, 1443, 1445, 1455, 1455, 1455, 1457, 
	1459, 1459, 1459, 1464, 1464, 1464, 1464, 1469, 
	1470, 1470, 1470, 1470, 1475, 1479, 1484, 1488, 
	1488, 1488, 1492, 1496, 1497, 1502, 1512, 1515, 
	1518, 1521, 1521, 1530, 1539, 1548, 1548, 1558, 
	1568, 1578, 1588, 1598, 1598, 1602, 1606, 1606, 
	1610, 1613, 1625, 1635, 1647, 1659, 1671, 1683, 
	1695, 1707, 1717, 1717, 1729, 1729, 1735, 1735, 
	1743, 1747, 1750, 1755, 1759, 1764, 1767, 1776, 
	1778, 1782, 1790, 1794, 1797, 1806, 1808, 1815, 
	1819, 1823, 1827, 1829, 1838, 1840, 1849, 1858, 
	1912, 1924, 1928, 1928, 1931, 1932, 1933, 1955, 
	1964, 1966, 1967, 1968, 1969, 1970, 1971, 1973, 
	1974, 1977, 1978, 1980, 1992, 2005, 2018, 2031, 
	2044, 2057, 2070, 2071, 2072, 2084, 2099, 2112, 
	2125, 2138, 2151, 2164, 2177, 2190, 2202, 2214, 
	2227, 2240, 2253, 2266, 2279, 2293, 2306, 2319, 
	2332, 2345, 2359, 2372, 2385, 2398, 2411, 2424, 
	2437, 2451, 2464, 2477, 2490, 2503, 2517, 2530, 
	2543, 2556, 2569, 2582, 2594, 2608, 2621, 2635, 
	2648, 2662, 2675, 2688, 2702, 2715, 2728, 2742, 
	2755, 2768, 2781, 2794, 2809, 2822, 2835, 2848, 
	2861, 2876, 2889, 2902, 2915, 2929, 2942, 2955, 
	2969, 2982, 2995, 3008, 3022, 3035, 3048, 3063, 
	3076, 3089, 3102, 3115, 3129, 3142, 3155, 3168, 
	3169, 3187, 3199, 3203, 3204, 3205, 3206, 3206, 
	3239, 3250, 3251, 3251, 3255, 3255, 3258, 3259, 
	3260, 3261, 3262, 3263, 3265, 3266, 3269, 3270, 
	3272, 3283, 3284, 3285, 3286, 3319, 3355, 3363, 
	3370, 3375, 3375, 3381, 3387, 3388, 3389, 3390, 
	3394, 3394, 3406, 3406, 3412, 3412, 3413, 3414, 
	3414, 3420, 3421, 3422, 3423, 3427, 3428, 3464, 
	3465, 3466, 3467, 3468, 3486, 3498, 3514, 3514, 
	3527, 3528, 3539, 3543, 3544, 3545, 3546, 3546, 
	3547, 3547, 3569, 3578, 3582, 3582, 3583, 3584, 
	3585, 3585, 3595, 3605, 3615, 3625, 3635, 3645, 
	3655, 3666, 3676, 3686, 3696, 3706, 3716, 3726, 
	3736, 3746, 3803, 3816, 3818, 3818, 3821, 3822, 
	3822, 3822, 3822, 3826, 3827, 3831, 3833, 3834, 
	3835, 3839, 3846, 3848, 3848, 3850, 3851, 3854, 
	3858, 3859, 3860, 3863, 3889, 3901, 3902, 3902, 
	3905, 3907, 3907, 3907, 3907, 3907, 3910, 3919, 
	3921, 3922, 3923, 3924, 3926, 3927, 3928, 3930, 
	3931, 3933, 3933, 3934, 3937, 3939, 3952, 3952, 
	3959, 3968, 3978, 3978, 3978, 3980, 3982, 3982, 
	3982, 3987, 3987, 3987, 3987, 3992, 3993, 3993, 
	3993, 3993, 3998, 4002, 4007, 4011, 4011, 4011, 
	4015, 4019, 4020, 4025, 4035, 4038, 4041, 4044, 
	4044, 4053, 4062, 4071, 4071, 4081, 4091, 4101, 
	4111, 4121, 4121, 4125, 4129, 4129, 4133, 4136, 
	4148, 4158, 4170, 4182, 4194, 4206, 4218, 4230, 
	4240, 4252, 4264, 4276, 4288, 4300, 4300, 4300, 
	4306, 4306, 4319, 4333, 4347, 4347, 4348, 4348, 
	4361, 4377, 4391, 4405, 4419, 4433, 4447, 4461, 
	4475, 4488, 4501, 4515, 4529, 4543, 4557, 4571, 
	4586, 4600, 4614, 4628, 4642, 4657, 4671, 4685, 
	4699, 4713, 4727, 4741, 4756, 4770, 4784, 4798, 
	4812, 4827, 4841, 4856, 4870, 4885, 4900, 4914, 
	4928, 4943, 4957, 4971, 4986, 5000, 5014, 5028, 
	5042, 5058, 5072, 5086, 5100, 5114, 5130, 5144, 
	5158, 5172, 5186, 5199, 5202, 5217, 5231, 5245, 
	5260, 5274, 5288, 5302, 5317, 5331, 5345, 5359, 
	5375, 5389, 5403, 5417, 5431, 5445, 5459, 5473, 
	5488, 5502, 5516, 5530, 5544, 5558, 5558, 5560, 
	5569, 5573, 5573, 5574, 5575, 5576, 5576, 5596, 
	5608, 5612, 5612, 5613, 5614, 5615, 5615, 5682, 
	5693, 5694, 5694, 5698, 5698, 5700, 5701, 5702, 
	5724, 5733, 5735, 5736, 5739, 5739, 5739, 5741, 
	5743, 5746, 5747, 5752, 5755, 5771, 5778, 5782, 
	5786, 5786, 5787, 5787, 5792, 5797, 5802, 5807, 
	5809, 5809, 5810, 5810, 5815, 5820, 5825, 5830, 
	5835, 5844, 5853, 5862, 5870, 5875, 5883, 5888, 
	5889, 5891, 5892, 5895, 5896, 5898, 5908, 5920, 
	5920, 5933, 5946, 5959, 5972, 5985, 5998, 5998, 
	5999, 5999, 6010, 6024, 6036, 6048, 6060, 6072, 
	6084, 6096, 6108, 6119, 6130, 6142, 6154, 6166, 
	6177, 6188, 6200, 6212, 6225, 6237, 6249, 6261, 
	6273, 6286, 6298, 6310, 6322, 6334, 6346, 6358, 
	6371, 6383, 6395, 6407, 6419, 6431, 6451, 6458, 
	6471, 6483, 6495, 6507, 6519, 6531, 6542, 6555, 
	6567, 6580, 6592, 6605, 6617, 6629, 6642, 6654, 
	6666, 6678, 6690, 6703, 6715, 6727, 6739, 6751, 
	6765, 6777, 6789, 6801, 6813, 6825, 6839, 6851, 
	6863, 6875, 6887, 6900, 6912, 6924, 6936, 6949, 
	6961, 6973, 6985, 6997, 7009, 7022, 7034, 7046, 
	7058, 7072, 7084, 7096, 7108, 7120, 7132, 7144, 
	7156, 7168, 7181, 7193, 7205, 7217, 7229, 7241, 
	7253, 7253, 7255, 7255, 7261, 7267, 7268, 7270, 
	7271, 7273, 7275, 7277
};

static const char _lex_trans_keys[] = {
	101, 103, 105, 110, 69, 78, 68, 95, 
	95, 0, 4, 10, 26, 35, 37, 45, 
	92, 96, 126, 0, 32, 33, 39, 40, 
	41, 42, 47, 48, 57, 58, 64, 91, 
	94, 123, 127, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 64, 96, 0, 47, 
	58, 63, 91, 94, 123, 127, 96, 0, 
	47, 58, 64, 91, 94, 123, 127, 0, 
	4, 26, 45, 0, 4, 10, 26, 77, 
	0, 4, 26, 77, 0, 4, 26, 63, 
	92, 0, 4, 10, 26, 0, 4, 26, 
	0, 4, 26, 45, 0, 4, 10, 26, 
	67, 92, 99, 0, 4, 26, 67, 99, 
	45, 0, 4, 26, 63, 92, 0, 4, 
	10, 26, 77, 0, 4, 26, 48, 57, 
	65, 70, 97, 102, 35, 37, 45, 92, 
	96, 126, 0, 32, 33, 39, 40, 41, 
	42, 47, 48, 57, 58, 64, 91, 94, 
	123, 127, 96, 0, 47, 58, 64, 91, 
	94, 123, 127, 64, 96, 0, 47, 58, 
	63, 91, 94, 123, 127, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 0, 4, 
	26, 45, 0, 4, 10, 26, 77, 0, 
	4, 26, 77, 0, 4, 26, 63, 92, 
	0, 4, 10, 26, 0, 4, 26, 0, 
	4, 26, 45, 0, 4, 10, 26, 67, 
	92, 99, 0, 4, 26, 67, 99, 45, 
	0, 4, 26, 63, 92, 0, 4, 10, 
	26, 77, 0, 4, 26, 48, 57, 65, 
	70, 97, 102, 35, 37, 45, 92, 96, 
	126, 0, 32, 33, 39, 40, 41, 42, 
	47, 48, 57, 58, 64, 91, 94, 123, 
	127, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 64, 96, 0, 47, 58, 63, 
	91, 94, 123, 127, 96, 0, 47, 58, 
	64, 91, 94, 123, 127, 35, 37, 45, 
	92, 96, 126, 0, 32, 33, 39, 40, 
	41, 42, 47, 48, 57, 58, 64, 91, 
	94, 123, 127, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 64, 96, 0, 47, 
	58, 63, 91, 94, 123, 127, 96, 0, 
	47, 58, 64, 91, 94, 123, 127, 35, 
	37, 45, 92, 96, 126, 0, 32, 33, 
	39, 40, 41, 42, 47, 48, 57, 58, 
	64, 91, 94, 123, 127, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 64, 96, 
	0, 47, 58, 63, 91, 94, 123, 127, 
	96, 0, 47, 58, 64, 91, 94, 123, 
	127, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 0, 4, 26, 33, 58, 63, 
	96, 0, 47, 59, 64, 91, 94, 123, 
	127, 58, 58, 33, 58, 63, 96, 0, 
	47, 59, 64, 91, 94, 123, 127, 58, 
	60, 62, 10, 9, 32, 37, 38, 40, 
	42, 43, 44, 45, 46, 47, 58, 60, 
	61, 62, 63, 91, 92, 93, 94, 96, 
	105, 114, 117, 119, 123, 124, 126, 0, 
	10, 11, 13, 14, 64, 125, 127, 9, 
	32, 37, 38, 40, 42, 43, 44, 45, 
	46, 47, 58, 60, 61, 62, 63, 91, 
	92, 93, 94, 96, 105, 114, 117, 119, 
	123, 124, 126, 0, 10, 11, 13, 14, 
	64, 125, 127, 33, 58, 63, 96, 102, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 63, 96, 101, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 63, 
	96, 115, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 63, 96, 99, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 63, 96, 117, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 63, 96, 
	101, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 63, 96, 110, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	63, 96, 108, 116, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 63, 96, 
	101, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 63, 96, 115, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	63, 96, 115, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 63, 96, 105, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 63, 96, 108, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 63, 
	96, 104, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 63, 96, 105, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 63, 96, 108, 0, 47, 59, 64, 
	91, 94, 123, 127, 115, 99, 117, 101, 
	108, 116, 101, 115, 115, 105, 108, 105, 
	108, 58, 9, 32, 40, 92, 96, 100, 
	0, 10, 11, 13, 14, 64, 91, 94, 
	123, 127, 10, 9, 32, 40, 92, 96, 
	100, 0, 10, 11, 13, 14, 64, 91, 
	94, 123, 127, 58, 98, 101, 103, 105, 
	110, 0, 4, 26, 65, 90, 97, 122, 
	61, 35, 37, 45, 92, 96, 126, 0, 
	32, 33, 39, 40, 41, 42, 47, 48, 
	57, 58, 64, 91, 94, 123, 127, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	61, 62, 126, 64, 96, 0, 63, 91, 
	94, 123, 127, 96, 0, 64, 91, 94, 
	123, 127, 93, 34, 39, 45, 61, 96, 
	126, 0, 64, 91, 94, 123, 127, 10, 
	96, 0, 47, 58, 64, 91, 94, 123, 
	127, 10, 10, 34, 10, 10, 39, 34, 
	39, 96, 0, 64, 91, 94, 123, 127, 
	10, 96, 0, 4, 26, 45, 0, 4, 
	10, 26, 77, 0, 4, 26, 77, 0, 
	4, 26, 63, 92, 0, 4, 10, 26, 
	0, 4, 26, 0, 4, 26, 45, 0, 
	4, 10, 26, 67, 92, 99, 0, 4, 
	26, 67, 99, 45, 0, 4, 26, 63, 
	92, 0, 4, 10, 26, 77, 0, 4, 
	26, 48, 57, 65, 70, 97, 102, 33, 
	58, 61, 63, 96, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	71, 96, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 73, 96, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 78, 96, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 68, 96, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 63, 96, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	58, 58, 96, 0, 47, 58, 64, 91, 
	94, 123, 127, 43, 45, 48, 57, 48, 
	57, 48, 57, 48, 57, 48, 57, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	58, 10, 32, 35, 60, 92, 9, 13, 
	10, 32, 35, 60, 92, 9, 13, 10, 
	32, 35, 60, 92, 9, 13, 10, 32, 
	35, 60, 92, 9, 13, 10, 32, 35, 
	60, 92, 9, 13, 10, 32, 35, 60, 
	92, 9, 13, 60, 10, 9, 32, 38, 
	46, 11, 13, 46, 0, 4, 10, 26, 
	32, 35, 61, 92, 95, 9, 13, 9, 
	32, 11, 13, 10, 10, 98, 10, 32, 
	9, 13, 10, 95, 0, 4, 10, 26, 
	32, 35, 92, 9, 13, 9, 32, 11, 
	13, 36, 64, 123, 96, 0, 47, 58, 
	64, 91, 94, 123, 127, 48, 57, 0, 
	4, 26, 67, 77, 99, 117, 120, 48, 
	55, 48, 55, 48, 55, 0, 4, 26, 
	63, 92, 0, 4, 26, 63, 92, 45, 
	0, 4, 26, 63, 92, 0, 4, 26, 
	45, 0, 4, 26, 63, 92, 0, 4, 
	26, 92, 0, 4, 26, 92, 0, 4, 
	26, 45, 10, 0, 4, 26, 63, 92, 
	0, 4, 26, 123, 48, 57, 65, 70, 
	97, 102, 0, 4, 26, 0, 4, 26, 
	0, 4, 26, 0, 4, 26, 48, 57, 
	65, 70, 97, 102, 0, 4, 26, 48, 
	57, 65, 70, 97, 102, 0, 4, 26, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	26, 125, 48, 57, 65, 70, 97, 102, 
	0, 4, 26, 125, 48, 57, 65, 70, 
	97, 102, 0, 4, 26, 125, 48, 57, 
	65, 70, 97, 102, 0, 4, 26, 125, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	26, 125, 48, 57, 65, 70, 97, 102, 
	0, 4, 26, 125, 0, 4, 26, 125, 
	0, 4, 26, 125, 0, 4, 26, 0, 
	4, 9, 26, 32, 125, 48, 57, 65, 
	70, 97, 102, 0, 4, 26, 125, 48, 
	57, 65, 70, 97, 102, 0, 4, 9, 
	26, 32, 125, 48, 57, 65, 70, 97, 
	102, 0, 4, 9, 26, 32, 125, 48, 
	57, 65, 70, 97, 102, 0, 4, 9, 
	26, 32, 125, 48, 57, 65, 70, 97, 
	102, 0, 4, 9, 26, 32, 125, 48, 
	57, 65, 70, 97, 102, 0, 4, 9, 
	26, 32, 125, 48, 57, 65, 70, 97, 
	102, 0, 4, 9, 26, 32, 125, 48, 
	57, 65, 70, 97, 102, 0, 4, 26, 
	125, 48, 57, 65, 70, 97, 102, 0, 
	4, 9, 26, 32, 125, 48, 57, 65, 
	70, 97, 102, 48, 57, 65, 70, 97, 
	102, 0, 4, 10, 26, 35, 92, 36, 
	64, 123, 96, 0, 47, 58, 64, 91, 
	94, 123, 127, 48, 57, 0, 4, 26, 
	67, 77, 99, 117, 120, 48, 55, 48, 
	55, 48, 55, 0, 4, 26, 63, 92, 
	0, 4, 26, 63, 92, 45, 0, 4, 
	26, 63, 92, 0, 4, 26, 45, 0, 
	4, 26, 63, 92, 0, 4, 26, 92, 
	0, 4, 26, 92, 0, 4, 26, 45, 
	10, 0, 4, 26, 63, 92, 0, 4, 
	26, 123, 48, 57, 65, 70, 97, 102, 
	0, 4, 26, 0, 4, 26, 0, 4, 
	26, 0, 4, 26, 48, 57, 65, 70, 
	97, 102, 0, 4, 26, 48, 57, 65, 
	70, 97, 102, 0, 4, 26, 48, 57, 
	65, 70, 97, 102, 0, 4, 26, 125, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	26, 125, 48, 57, 65, 70, 97, 102, 
	0, 4, 26, 125, 48, 57, 65, 70, 
	97, 102, 0, 4, 26, 125, 48, 57, 
	65, 70, 97, 102, 0, 4, 26, 125, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	26, 125, 0, 4, 26, 125, 0, 4, 
	26, 125, 0, 4, 26, 0, 4, 9, 
	26, 32, 125, 48, 57, 65, 70, 97, 
	102, 0, 4, 26, 125, 48, 57, 65, 
	70, 97, 102, 0, 4, 9, 26, 32, 
	125, 48, 57, 65, 70, 97, 102, 0, 
	4, 9, 26, 32, 125, 48, 57, 65, 
	70, 97, 102, 0, 4, 9, 26, 32, 
	125, 48, 57, 65, 70, 97, 102, 0, 
	4, 9, 26, 32, 125, 48, 57, 65, 
	70, 97, 102, 0, 4, 9, 26, 32, 
	125, 48, 57, 65, 70, 97, 102, 0, 
	4, 9, 26, 32, 125, 48, 57, 65, 
	70, 97, 102, 0, 4, 26, 125, 48, 
	57, 65, 70, 97, 102, 0, 4, 9, 
	26, 32, 125, 48, 57, 65, 70, 97, 
	102, 48, 57, 65, 70, 97, 102, 0, 
	4, 10, 26, 32, 92, 9, 13, 9, 
	32, 11, 13, 0, 4, 26, 0, 4, 
	10, 26, 92, 0, 4, 10, 26, 0, 
	4, 10, 26, 35, 36, 64, 123, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	48, 57, 0, 4, 10, 26, 0, 4, 
	10, 26, 32, 35, 9, 13, 9, 32, 
	11, 13, 36, 64, 123, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 48, 57, 
	0, 4, 10, 26, 32, 9, 13, 9, 
	32, 11, 13, 65, 90, 97, 122, 65, 
	90, 97, 122, 36, 64, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 48, 57, 
	96, 0, 47, 58, 64, 91, 94, 123, 
	127, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 0, 4, 10, 26, 32, 33, 
	35, 36, 37, 38, 42, 43, 45, 47, 
	58, 60, 61, 62, 66, 69, 91, 92, 
	93, 95, 97, 98, 99, 100, 101, 102, 
	105, 109, 110, 111, 114, 115, 116, 117, 
	119, 121, 124, 126, 1, 8, 9, 13, 
	14, 64, 65, 90, 94, 96, 123, 127, 
	33, 61, 63, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 9, 32, 11, 13, 
	61, 64, 126, 10, 10, 35, 37, 45, 
	92, 96, 126, 0, 32, 33, 39, 40, 
	41, 42, 47, 48, 57, 58, 64, 91, 
	94, 123, 127, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 48, 57, 115, 38, 
	42, 64, 58, 60, 61, 62, 61, 62, 
	126, 61, 61, 62, 33, 61, 63, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 69, 96, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	71, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 61, 63, 73, 96, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	61, 63, 78, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 61, 63, 78, 
	96, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 68, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 93, 10, 
	33, 61, 63, 95, 0, 47, 58, 64, 
	91, 96, 123, 127, 33, 61, 63, 69, 
	70, 76, 96, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 78, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 67, 96, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	79, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 61, 63, 68, 96, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	61, 63, 73, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 61, 63, 78, 
	96, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 71, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 95, 0, 47, 58, 64, 91, 96, 
	123, 127, 33, 61, 63, 95, 0, 47, 
	58, 64, 91, 96, 123, 127, 33, 61, 
	63, 73, 96, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 76, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 69, 96, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	73, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 61, 63, 78, 96, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	61, 63, 96, 108, 110, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	96, 105, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 61, 63, 96, 97, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	61, 63, 96, 115, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 61, 63, 96, 
	100, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 101, 114, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	61, 63, 96, 103, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 61, 63, 96, 
	105, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 110, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 101, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 97, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 107, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	96, 97, 108, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 115, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 101, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	96, 97, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 61, 63, 96, 115, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	61, 63, 96, 101, 111, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	96, 102, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 61, 63, 96, 105, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	61, 63, 96, 110, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 61, 63, 96, 
	101, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 100, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 61, 63, 96, 108, 110, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 115, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	96, 101, 105, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 102, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 100, 115, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 117, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 114, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 97, 111, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 108, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 114, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 102, 110, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 111, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 100, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 117, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	96, 108, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 61, 63, 96, 101, 105, 
	111, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 120, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 116, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 108, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 101, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 61, 63, 
	96, 100, 115, 116, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 61, 63, 96, 
	111, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 99, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 117, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 114, 
	117, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 121, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 114, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 101, 
	117, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 108, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 112, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 101, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 104, 114, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 101, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 110, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 61, 63, 96, 100, 108, 116, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	61, 63, 96, 101, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 61, 63, 96, 
	101, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 105, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 104, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 101, 
	105, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 61, 63, 96, 105, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 61, 
	63, 96, 101, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 61, 63, 96, 108, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	124, 0, 4, 9, 26, 32, 35, 92, 
	96, 1, 10, 11, 13, 14, 64, 91, 
	94, 123, 127, 33, 58, 63, 96, 0, 
	47, 59, 64, 91, 94, 123, 127, 9, 
	32, 11, 13, 10, 10, 10, 0, 4, 
	10, 26, 32, 33, 35, 37, 38, 42, 
	43, 45, 47, 60, 61, 62, 91, 92, 
	93, 94, 96, 124, 126, 1, 8, 9, 
	13, 14, 64, 65, 90, 123, 127, 33, 
	63, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 61, 9, 32, 11, 13, 61, 
	64, 126, 10, 10, 38, 42, 64, 60, 
	61, 62, 61, 62, 126, 61, 61, 62, 
	33, 63, 96, 0, 47, 58, 64, 91, 
	94, 123, 127, 93, 10, 124, 0, 4, 
	10, 26, 32, 35, 37, 38, 40, 42, 
	44, 45, 46, 58, 60, 61, 62, 63, 
	92, 94, 105, 114, 117, 119, 123, 124, 
	126, 9, 13, 43, 47, 91, 93, 9, 
	32, 37, 38, 40, 42, 43, 44, 45, 
	46, 47, 58, 60, 61, 62, 63, 91, 
	92, 93, 94, 96, 105, 114, 117, 119, 
	123, 124, 126, 0, 10, 11, 13, 14, 
	64, 125, 127, 0, 4, 10, 26, 32, 
	61, 9, 13, 10, 32, 38, 46, 61, 
	9, 13, 10, 32, 61, 9, 13, 10, 
	32, 42, 61, 9, 13, 10, 32, 9, 
	13, 61, 62, 46, 46, 58, 10, 32, 
	9, 13, 33, 58, 63, 96, 0, 47, 
	59, 64, 91, 94, 123, 127, 10, 32, 
	61, 124, 9, 13, 10, 10, 10, 32, 
	42, 61, 9, 13, 58, 60, 62, 10, 
	32, 9, 13, 10, 9, 32, 37, 38, 
	40, 42, 43, 44, 45, 46, 47, 58, 
	60, 61, 62, 63, 91, 92, 93, 94, 
	96, 105, 114, 117, 119, 123, 124, 126, 
	0, 10, 11, 13, 14, 64, 125, 127, 
	102, 101, 110, 104, 0, 4, 9, 26, 
	32, 92, 96, 100, 1, 10, 11, 13, 
	14, 64, 91, 94, 123, 127, 33, 58, 
	63, 96, 0, 47, 59, 64, 91, 94, 
	123, 127, 9, 32, 40, 92, 96, 100, 
	0, 10, 11, 13, 14, 64, 91, 94, 
	123, 127, 33, 58, 63, 96, 111, 0, 
	47, 59, 64, 91, 94, 123, 127, 10, 
	0, 4, 9, 26, 32, 35, 92, 100, 
	123, 11, 13, 9, 32, 11, 13, 10, 
	10, 10, 111, 0, 4, 10, 26, 32, 
	35, 92, 96, 105, 114, 117, 119, 1, 
	8, 9, 13, 14, 64, 91, 94, 123, 
	127, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 9, 32, 11, 13, 10, 10, 
	10, 96, 102, 0, 47, 58, 64, 91, 
	94, 123, 127, 96, 101, 0, 47, 58, 
	64, 91, 94, 123, 127, 96, 115, 0, 
	47, 58, 64, 91, 94, 123, 127, 96, 
	99, 0, 47, 58, 64, 91, 94, 123, 
	127, 96, 117, 0, 47, 58, 64, 91, 
	94, 123, 127, 96, 101, 0, 47, 58, 
	64, 91, 94, 123, 127, 96, 110, 0, 
	47, 58, 64, 91, 94, 123, 127, 96, 
	108, 116, 0, 47, 58, 64, 91, 94, 
	123, 127, 96, 101, 0, 47, 58, 64, 
	91, 94, 123, 127, 96, 115, 0, 47, 
	58, 64, 91, 94, 123, 127, 96, 115, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	96, 105, 0, 47, 58, 64, 91, 94, 
	123, 127, 96, 108, 0, 47, 58, 64, 
	91, 94, 123, 127, 96, 104, 0, 47, 
	58, 64, 91, 94, 123, 127, 96, 105, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	96, 108, 0, 47, 58, 64, 91, 94, 
	123, 127, 0, 4, 10, 26, 32, 33, 
	35, 37, 38, 40, 42, 43, 45, 46, 
	47, 58, 60, 61, 62, 63, 66, 69, 
	91, 92, 94, 95, 97, 98, 99, 100, 
	101, 102, 105, 109, 110, 111, 114, 115, 
	116, 117, 119, 121, 123, 124, 126, 1, 
	8, 9, 13, 14, 64, 65, 90, 93, 
	96, 125, 127, 33, 58, 61, 63, 96, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	58, 61, 61, 62, 126, 61, 9, 32, 
	11, 13, 61, 10, 32, 9, 13, 61, 
	126, 10, 10, 65, 90, 97, 122, 0, 
	4, 26, 65, 90, 97, 122, 38, 61, 
	42, 61, 61, 61, 48, 57, 48, 57, 
	61, 62, 46, 46, 0, 4, 26, 33, 
	34, 36, 37, 38, 39, 42, 43, 45, 
	47, 58, 60, 61, 62, 64, 91, 94, 
	96, 124, 126, 0, 63, 92, 93, 123, 
	127, 33, 61, 63, 96, 0, 47, 58, 
	64, 91, 94, 123, 127, 61, 61, 62, 
	126, 61, 62, 61, 64, 126, 96, 0, 
	47, 58, 64, 91, 94, 123, 127, 48, 
	57, 38, 42, 64, 60, 61, 62, 61, 
	61, 62, 124, 60, 61, 62, 61, 62, 
	126, 61, 62, 0, 4, 10, 26, 32, 
	92, 95, 9, 13, 65, 90, 97, 122, 
	96, 0, 64, 91, 94, 123, 127, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	0, 4, 26, 67, 77, 99, 117, 120, 
	48, 55, 48, 55, 48, 55, 0, 4, 
	26, 63, 92, 0, 4, 26, 63, 92, 
	45, 0, 4, 26, 63, 92, 0, 4, 
	26, 45, 0, 4, 26, 63, 92, 0, 
	4, 26, 92, 0, 4, 26, 92, 0, 
	4, 26, 45, 10, 0, 4, 26, 63, 
	92, 0, 4, 26, 123, 48, 57, 65, 
	70, 97, 102, 0, 4, 26, 0, 4, 
	26, 0, 4, 26, 0, 4, 26, 48, 
	57, 65, 70, 97, 102, 0, 4, 26, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	26, 48, 57, 65, 70, 97, 102, 0, 
	4, 26, 125, 48, 57, 65, 70, 97, 
	102, 0, 4, 26, 125, 48, 57, 65, 
	70, 97, 102, 0, 4, 26, 125, 48, 
	57, 65, 70, 97, 102, 0, 4, 26, 
	125, 48, 57, 65, 70, 97, 102, 0, 
	4, 26, 125, 48, 57, 65, 70, 97, 
	102, 0, 4, 26, 125, 0, 4, 26, 
	125, 0, 4, 26, 125, 0, 4, 26, 
	0, 4, 9, 26, 32, 125, 48, 57, 
	65, 70, 97, 102, 0, 4, 26, 125, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	9, 26, 32, 125, 48, 57, 65, 70, 
	97, 102, 0, 4, 9, 26, 32, 125, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	9, 26, 32, 125, 48, 57, 65, 70, 
	97, 102, 0, 4, 9, 26, 32, 125, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	9, 26, 32, 125, 48, 57, 65, 70, 
	97, 102, 0, 4, 9, 26, 32, 125, 
	48, 57, 65, 70, 97, 102, 0, 4, 
	26, 125, 48, 57, 65, 70, 97, 102, 
	0, 4, 9, 26, 32, 125, 48, 57, 
	65, 70, 97, 102, 0, 4, 9, 26, 
	32, 125, 48, 57, 65, 70, 97, 102, 
	0, 4, 9, 26, 32, 125, 48, 57, 
	65, 70, 97, 102, 0, 4, 9, 26, 
	32, 125, 48, 57, 65, 70, 97, 102, 
	0, 4, 9, 26, 32, 125, 48, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 33, 58, 61, 63, 96, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 69, 96, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 78, 96, 0, 47, 59, 64, 91, 
	94, 123, 127, 10, 33, 58, 61, 63, 
	95, 0, 47, 59, 64, 91, 96, 123, 
	127, 33, 58, 61, 63, 69, 70, 76, 
	96, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 78, 96, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 67, 96, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 79, 96, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 68, 
	96, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 73, 96, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 78, 96, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 71, 96, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 95, 
	0, 47, 59, 64, 91, 96, 123, 127, 
	33, 58, 61, 63, 95, 0, 47, 59, 
	64, 91, 96, 123, 127, 33, 58, 61, 
	63, 73, 96, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 76, 
	96, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 69, 96, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 73, 96, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 78, 96, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 96, 
	108, 110, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 105, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 97, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 96, 115, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 100, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 101, 
	114, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 96, 103, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 96, 105, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 96, 110, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 96, 
	101, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 96, 97, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 96, 107, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 96, 97, 108, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 115, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 101, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 97, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 96, 115, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 101, 111, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 96, 
	102, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 96, 108, 110, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 115, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 96, 101, 105, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 96, 100, 115, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 117, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 114, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 97, 111, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 96, 108, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 96, 114, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 96, 
	102, 110, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 111, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 100, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 96, 117, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 108, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 101, 
	105, 111, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 120, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 116, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 96, 108, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 101, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 100, 
	115, 116, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 111, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 99, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 96, 117, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 101, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 0, 
	47, 59, 64, 91, 94, 123, 127, 61, 
	62, 126, 33, 58, 61, 63, 96, 114, 
	117, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 96, 121, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 96, 114, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 96, 101, 117, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 108, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 112, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 101, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 96, 104, 114, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 96, 101, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 96, 
	117, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 96, 110, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 96, 100, 108, 116, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 96, 101, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 96, 101, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 96, 
	115, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 96, 115, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 61, 63, 96, 105, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 61, 
	63, 96, 108, 0, 47, 59, 64, 91, 
	94, 123, 127, 33, 58, 61, 63, 96, 
	104, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 61, 63, 96, 101, 105, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 108, 0, 47, 
	59, 64, 91, 94, 123, 127, 33, 58, 
	61, 63, 96, 101, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 61, 63, 
	96, 105, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 61, 63, 96, 101, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 61, 63, 96, 108, 0, 47, 
	59, 64, 91, 94, 123, 127, 61, 124, 
	0, 4, 10, 26, 32, 35, 92, 9, 
	13, 9, 32, 11, 13, 10, 10, 10, 
	0, 4, 10, 26, 32, 34, 35, 39, 
	92, 96, 1, 8, 9, 13, 14, 64, 
	91, 94, 123, 127, 33, 58, 63, 96, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	9, 32, 11, 13, 10, 10, 10, 0, 
	4, 10, 26, 32, 33, 35, 36, 37, 
	38, 40, 41, 42, 44, 45, 46, 48, 
	58, 59, 60, 61, 62, 63, 64, 66, 
	69, 91, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 105, 109, 110, 
	111, 114, 115, 116, 117, 119, 121, 123, 
	124, 125, 126, 127, 1, 8, 9, 13, 
	14, 31, 34, 39, 43, 47, 49, 57, 
	65, 90, 33, 63, 96, 0, 47, 58, 
	64, 91, 94, 123, 127, 61, 9, 32, 
	11, 13, 61, 126, 10, 10, 35, 37, 
	45, 92, 96, 126, 0, 32, 33, 39, 
	40, 41, 42, 47, 48, 57, 58, 64, 
	91, 94, 123, 127, 96, 0, 47, 58, 
	64, 91, 94, 123, 127, 48, 57, 61, 
	38, 46, 61, 42, 61, 61, 62, 46, 
	48, 57, 46, 69, 95, 101, 48, 57, 
	95, 48, 57, 46, 66, 68, 69, 79, 
	88, 95, 98, 100, 101, 105, 111, 114, 
	120, 48, 57, 69, 95, 101, 105, 114, 
	48, 57, 43, 45, 48, 57, 95, 105, 
	48, 57, 105, 95, 105, 114, 48, 57, 
	95, 105, 114, 48, 57, 95, 105, 114, 
	48, 57, 95, 105, 114, 48, 57, 105, 
	114, 105, 95, 105, 114, 48, 49, 95, 
	105, 114, 48, 49, 95, 105, 114, 48, 
	49, 95, 105, 114, 48, 57, 95, 105, 
	114, 48, 57, 95, 105, 114, 48, 57, 
	65, 70, 97, 102, 95, 105, 114, 48, 
	57, 65, 70, 97, 102, 95, 105, 114, 
	48, 57, 65, 70, 97, 102, 46, 69, 
	95, 101, 105, 114, 48, 57, 95, 105, 
	114, 48, 57, 46, 69, 95, 101, 105, 
	114, 48, 57, 95, 105, 114, 48, 57, 
	58, 60, 61, 62, 61, 62, 126, 61, 
	61, 62, 64, 96, 0, 47, 58, 63, 
	91, 94, 123, 127, 33, 58, 63, 96, 
	0, 47, 59, 64, 91, 94, 123, 127, 
	33, 58, 63, 69, 96, 0, 47, 59, 
	64, 91, 94, 123, 127, 33, 58, 63, 
	71, 96, 0, 47, 59, 64, 91, 94, 
	123, 127, 33, 58, 63, 73, 96, 0, 
	47, 59, 64, 91, 94, 123, 127, 33, 
	58, 63, 78, 96, 0, 47, 59, 64, 
	91, 94, 123, 127, 33, 58, 63, 78, 
	96, 0, 47, 59, 64, 91, 94, 123, 
	127, 33, 58, 63, 68, 96, 0, 47, 
	59, 64, 91, 94, 123, 127, 10, 33, 
	63, 95, 0, 47, 58, 64, 91, 96, 
	123, 127, 33, 63, 69, 70, 76, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 78, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 67, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 79, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 68, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 73, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 78, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 71, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 95, 0, 
	47, 58, 64, 91, 96, 123, 127, 33, 
	63, 95, 0, 47, 58, 64, 91, 96, 
	123, 127, 33, 63, 73, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	76, 96, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 69, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	95, 0, 47, 58, 64, 91, 96, 123, 
	127, 33, 63, 95, 0, 47, 58, 64, 
	91, 96, 123, 127, 33, 63, 73, 96, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 78, 96, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 96, 108, 
	110, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 105, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	97, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 115, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	100, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 101, 114, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 103, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 96, 105, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 110, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 96, 101, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 97, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 96, 107, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 97, 108, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 115, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 101, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 97, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 115, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 115, 0, 
	47, 58, 64, 91, 94, 123, 127, 10, 
	32, 33, 35, 60, 63, 92, 96, 0, 
	8, 9, 13, 14, 47, 58, 64, 91, 
	94, 123, 127, 10, 32, 35, 60, 92, 
	9, 13, 33, 63, 96, 101, 111, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 102, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 105, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 110, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 101, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 100, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 108, 110, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 115, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 101, 105, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 96, 102, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 96, 100, 115, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	117, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 114, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	97, 111, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 96, 108, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 115, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 96, 101, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 114, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 96, 102, 110, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 111, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 100, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 117, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 108, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 101, 105, 111, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	120, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 116, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	108, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 116, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	101, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 100, 115, 116, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 111, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 99, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 117, 0, 47, 58, 64, 91, 
	94, 123, 127, 33, 63, 96, 101, 0, 
	47, 58, 64, 91, 94, 123, 127, 33, 
	63, 96, 114, 117, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 96, 121, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 96, 114, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 96, 110, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 96, 101, 117, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	108, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 102, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	112, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 101, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	114, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 104, 114, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 101, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 96, 117, 0, 47, 
	58, 64, 91, 94, 123, 127, 33, 63, 
	96, 110, 0, 47, 58, 64, 91, 94, 
	123, 127, 33, 63, 96, 100, 108, 116, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 96, 101, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 96, 102, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 96, 101, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 96, 115, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 96, 115, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 96, 105, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 96, 108, 0, 47, 58, 64, 
	91, 94, 123, 127, 33, 63, 96, 104, 
	0, 47, 58, 64, 91, 94, 123, 127, 
	33, 63, 96, 101, 105, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	108, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 101, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	105, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 101, 0, 47, 58, 
	64, 91, 94, 123, 127, 33, 63, 96, 
	108, 0, 47, 58, 64, 91, 94, 123, 
	127, 33, 63, 96, 100, 0, 47, 58, 
	64, 91, 94, 123, 127, 61, 124, 9, 
	32, 38, 46, 11, 13, 9, 32, 38, 
	46, 11, 13, 46, 10, 61, 10, 10, 
	101, 10, 110, 10, 100, 10, 0
};

static const char _lex_single_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 4, 6, 1, 2, 1, 4, 
	5, 4, 5, 4, 3, 4, 7, 3, 
	2, 1, 5, 5, 3, 6, 1, 2, 
	1, 4, 5, 4, 5, 4, 3, 4, 
	7, 3, 2, 1, 5, 5, 3, 6, 
	1, 2, 1, 6, 1, 2, 1, 6, 
	1, 2, 1, 1, 3, 4, 1, 1, 
	4, 1, 1, 1, 1, 28, 28, 5, 
	5, 5, 5, 5, 5, 5, 6, 5, 
	5, 5, 5, 5, 5, 5, 5, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 6, 1, 6, 1, 
	1, 1, 1, 1, 1, 3, 1, 6, 
	1, 3, 2, 1, 1, 6, 2, 1, 
	2, 1, 2, 3, 2, 4, 5, 4, 
	5, 4, 3, 4, 7, 3, 2, 1, 
	5, 5, 3, 5, 6, 6, 6, 6, 
	4, 1, 1, 1, 2, 0, 0, 0, 
	0, 1, 1, 5, 5, 5, 5, 5, 
	5, 1, 1, 4, 1, 9, 2, 0, 
	1, 1, 1, 2, 1, 1, 7, 2, 
	3, 1, 0, 8, 0, 0, 0, 0, 
	0, 0, 5, 0, 0, 0, 5, 1, 
	0, 0, 0, 5, 4, 5, 4, 0, 
	0, 4, 4, 1, 5, 4, 3, 3, 
	3, 0, 3, 3, 3, 0, 4, 4, 
	4, 4, 4, 0, 4, 4, 0, 4, 
	3, 6, 4, 6, 6, 6, 6, 6, 
	6, 4, 0, 6, 0, 0, 0, 6, 
	3, 1, 0, 8, 0, 0, 0, 0, 
	0, 0, 5, 0, 0, 0, 5, 1, 
	0, 0, 0, 5, 4, 5, 4, 0, 
	0, 4, 4, 1, 5, 4, 3, 3, 
	3, 0, 3, 3, 3, 0, 4, 4, 
	4, 4, 4, 0, 4, 4, 0, 4, 
	3, 6, 4, 6, 6, 6, 6, 6, 
	6, 4, 0, 6, 0, 0, 0, 6, 
	2, 3, 5, 4, 5, 3, 1, 0, 
	4, 6, 2, 3, 1, 0, 5, 2, 
	0, 0, 2, 1, 0, 1, 1, 42, 
	4, 2, 0, 3, 1, 1, 6, 1, 
	0, 1, 1, 1, 1, 1, 2, 1, 
	3, 1, 0, 4, 5, 5, 5, 5, 
	5, 5, 1, 1, 4, 7, 5, 5, 
	5, 5, 5, 5, 5, 4, 4, 5, 
	5, 5, 5, 5, 6, 5, 5, 5, 
	5, 6, 5, 5, 5, 5, 5, 5, 
	6, 5, 5, 5, 5, 6, 5, 5, 
	5, 5, 5, 4, 6, 5, 6, 5, 
	6, 5, 5, 6, 5, 5, 6, 5, 
	5, 5, 5, 7, 5, 5, 5, 5, 
	7, 5, 5, 5, 6, 5, 5, 6, 
	5, 5, 5, 6, 5, 5, 7, 5, 
	5, 5, 5, 6, 5, 5, 5, 1, 
	8, 4, 2, 1, 1, 1, 0, 23, 
	3, 1, 0, 2, 0, 3, 1, 1, 
	1, 1, 1, 2, 1, 3, 1, 0, 
	3, 1, 1, 1, 27, 28, 6, 5, 
	3, 0, 4, 2, 1, 1, 1, 2, 
	0, 4, 0, 4, 0, 1, 1, 0, 
	4, 1, 1, 1, 2, 1, 28, 1, 
	1, 1, 1, 8, 4, 6, 0, 5, 
	1, 9, 2, 1, 1, 1, 0, 1, 
	0, 12, 1, 2, 0, 1, 1, 1, 
	0, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 45, 5, 2, 0, 3, 1, 0, 
	0, 0, 2, 1, 2, 2, 1, 1, 
	0, 3, 2, 0, 2, 1, 1, 0, 
	1, 1, 3, 20, 4, 1, 0, 3, 
	2, 0, 0, 0, 0, 3, 1, 0, 
	1, 1, 1, 2, 1, 1, 0, 1, 
	2, 0, 1, 3, 2, 7, 0, 1, 
	1, 8, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 5, 1, 0, 0, 
	0, 5, 4, 5, 4, 0, 0, 4, 
	4, 1, 5, 4, 3, 3, 3, 0, 
	3, 3, 3, 0, 4, 4, 4, 4, 
	4, 0, 4, 4, 0, 4, 3, 6, 
	4, 6, 6, 6, 6, 6, 6, 4, 
	6, 6, 6, 6, 6, 0, 0, 0, 
	0, 5, 6, 6, 0, 1, 0, 5, 
	8, 6, 6, 6, 6, 6, 6, 6, 
	5, 5, 6, 6, 6, 6, 6, 7, 
	6, 6, 6, 6, 7, 6, 6, 6, 
	6, 6, 6, 7, 6, 6, 6, 6, 
	7, 6, 7, 6, 7, 7, 6, 6, 
	7, 6, 6, 7, 6, 6, 6, 6, 
	8, 6, 6, 6, 6, 8, 6, 6, 
	6, 6, 5, 3, 7, 6, 6, 7, 
	6, 6, 6, 7, 6, 6, 6, 8, 
	6, 6, 6, 6, 6, 6, 6, 7, 
	6, 6, 6, 6, 6, 0, 2, 7, 
	2, 0, 1, 1, 1, 0, 10, 4, 
	2, 0, 1, 1, 1, 0, 53, 3, 
	1, 0, 2, 0, 2, 1, 1, 6, 
	1, 0, 1, 3, 0, 0, 2, 2, 
	1, 1, 3, 1, 14, 5, 2, 2, 
	0, 1, 0, 3, 3, 3, 3, 2, 
	0, 1, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 6, 3, 6, 3, 1, 
	2, 1, 3, 1, 2, 2, 4, 0, 
	5, 5, 5, 5, 5, 5, 0, 1, 
	0, 3, 6, 4, 4, 4, 4, 4, 
	4, 4, 3, 3, 4, 4, 4, 3, 
	3, 4, 4, 5, 4, 4, 4, 4, 
	5, 4, 4, 4, 4, 4, 4, 5, 
	4, 4, 4, 4, 4, 8, 5, 5, 
	4, 4, 4, 4, 4, 3, 5, 4, 
	5, 4, 5, 4, 4, 5, 4, 4, 
	4, 4, 5, 4, 4, 4, 4, 6, 
	4, 4, 4, 4, 4, 6, 4, 4, 
	4, 4, 5, 4, 4, 4, 5, 4, 
	4, 4, 4, 4, 5, 4, 4, 4, 
	6, 4, 4, 4, 4, 4, 4, 4, 
	4, 5, 4, 4, 4, 4, 4, 4, 
	0, 2, 0, 4, 4, 1, 2, 1, 
	2, 2, 2, 1
};

static const char _lex_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 8, 4, 4, 4, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 8, 4, 4, 
	4, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 8, 
	4, 4, 4, 8, 4, 4, 4, 8, 
	4, 4, 4, 4, 0, 4, 0, 0, 
	4, 0, 0, 0, 0, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 5, 0, 
	0, 0, 0, 0, 0, 2, 0, 8, 
	4, 0, 3, 3, 0, 3, 4, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 4, 4, 4, 4, 4, 
	4, 0, 0, 4, 1, 1, 1, 1, 
	1, 4, 0, 1, 1, 1, 1, 1, 
	1, 0, 0, 1, 0, 1, 1, 0, 
	0, 0, 0, 1, 0, 0, 1, 1, 
	0, 4, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 3, 3, 3, 0, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 3, 0, 3, 0, 0, 
	0, 4, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 3, 3, 3, 0, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 3, 0, 3, 0, 1, 
	1, 0, 0, 0, 0, 0, 4, 1, 
	0, 1, 1, 0, 4, 1, 1, 1, 
	2, 2, 0, 4, 1, 4, 4, 6, 
	4, 1, 0, 0, 0, 0, 8, 4, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 4, 4, 4, 4, 4, 
	4, 4, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 0, 
	5, 4, 1, 0, 0, 0, 0, 5, 
	4, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	4, 0, 0, 0, 3, 4, 1, 1, 
	1, 0, 1, 2, 0, 0, 0, 1, 
	0, 4, 0, 1, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 4, 0, 
	0, 0, 0, 5, 4, 5, 0, 4, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 5, 4, 1, 0, 0, 0, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 6, 4, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 0, 0, 
	2, 2, 0, 0, 0, 0, 1, 2, 
	0, 0, 0, 3, 4, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	4, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 3, 
	0, 4, 4, 4, 0, 0, 0, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 5, 4, 
	1, 0, 0, 0, 0, 0, 7, 4, 
	0, 0, 1, 0, 0, 0, 0, 8, 
	4, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	3, 3, 3, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 4, 4, 0, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 6, 1, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0
};

static const short _lex_index_offsets[] = {
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 23, 38, 44, 51, 57, 
	62, 68, 73, 79, 84, 88, 93, 101, 
	105, 108, 110, 116, 122, 129, 144, 150, 
	157, 163, 168, 174, 179, 185, 190, 194, 
	199, 207, 211, 214, 216, 222, 228, 235, 
	250, 256, 263, 269, 284, 290, 297, 303, 
	318, 324, 331, 337, 343, 347, 356, 358, 
	360, 369, 371, 373, 375, 377, 410, 443, 
	453, 463, 473, 483, 493, 503, 513, 524, 
	534, 544, 554, 564, 574, 584, 594, 604, 
	606, 608, 610, 612, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 643, 645, 657, 
	659, 661, 663, 665, 667, 669, 675, 677, 
	692, 698, 702, 708, 713, 715, 725, 732, 
	734, 737, 739, 742, 749, 752, 757, 763, 
	768, 774, 779, 783, 788, 796, 800, 803, 
	805, 811, 817, 824, 834, 845, 856, 867, 
	878, 887, 889, 891, 897, 901, 903, 905, 
	907, 909, 915, 917, 924, 931, 938, 945, 
	952, 959, 961, 963, 969, 971, 982, 986, 
	987, 989, 991, 993, 997, 999, 1001, 1010, 
	1014, 1018, 1024, 1026, 1036, 1037, 1038, 1040, 
	1042, 1043, 1044, 1050, 1051, 1052, 1053, 1059, 
	1061, 1062, 1063, 1064, 1070, 1075, 1081, 1086, 
	1087, 1088, 1093, 1098, 1100, 1106, 1114, 1118, 
	1122, 1126, 1127, 1134, 1141, 1148, 1149, 1157, 
	1165, 1173, 1181, 1189, 1190, 1195, 1200, 1201, 
	1206, 1210, 1220, 1228, 1238, 1248, 1258, 1268, 
	1278, 1288, 1296, 1297, 1307, 1308, 1312, 1313, 
	1320, 1324, 1330, 1332, 1342, 1343, 1344, 1346, 
	1348, 1349, 1350, 1356, 1357, 1358, 1359, 1365, 
	1367, 1368, 1369, 1370, 1376, 1381, 1387, 1392, 
	1393, 1394, 1399, 1404, 1406, 1412, 1420, 1424, 
	1428, 1432, 1433, 1440, 1447, 1454, 1455, 1463, 
	1471, 1479, 1487, 1495, 1496, 1501, 1506, 1507, 
	1512, 1516, 1526, 1534, 1544, 1554, 1564, 1574, 
	1584, 1594, 1602, 1603, 1613, 1614, 1618, 1619, 
	1627, 1631, 1635, 1641, 1646, 1652, 1656, 1662, 
	1664, 1669, 1677, 1681, 1685, 1691, 1693, 1700, 
	1704, 1707, 1710, 1713, 1719, 1721, 1727, 1733, 
	1782, 1791, 1795, 1796, 1800, 1802, 1804, 1819, 
	1825, 1827, 1829, 1831, 1833, 1835, 1837, 1840, 
	1842, 1846, 1848, 1850, 1859, 1869, 1879, 1889, 
	1899, 1909, 1919, 1921, 1923, 1932, 1944, 1954, 
	1964, 1974, 1984, 1994, 2004, 2014, 2023, 2032, 
	2042, 2052, 2062, 2072, 2082, 2093, 2103, 2113, 
	2123, 2133, 2144, 2154, 2164, 2174, 2184, 2194, 
	2204, 2215, 2225, 2235, 2245, 2255, 2266, 2276, 
	2286, 2296, 2306, 2316, 2325, 2336, 2346, 2357, 
	2367, 2378, 2388, 2398, 2409, 2419, 2429, 2440, 
	2450, 2460, 2470, 2480, 2492, 2502, 2512, 2522, 
	2532, 2544, 2554, 2564, 2574, 2585, 2595, 2605, 
	2616, 2626, 2636, 2646, 2657, 2667, 2677, 2689, 
	2699, 2709, 2719, 2729, 2740, 2750, 2760, 2770, 
	2772, 2786, 2795, 2799, 2801, 2803, 2805, 2806, 
	2835, 2843, 2845, 2846, 2850, 2851, 2855, 2857, 
	2859, 2861, 2863, 2865, 2868, 2870, 2874, 2876, 
	2878, 2886, 2888, 2890, 2892, 2923, 2956, 2964, 
	2971, 2976, 2977, 2983, 2988, 2990, 2992, 2994, 
	2998, 2999, 3008, 3009, 3015, 3016, 3018, 3020, 
	3021, 3027, 3029, 3031, 3033, 3037, 3039, 3072, 
	3074, 3076, 3078, 3080, 3094, 3103, 3115, 3116, 
	3126, 3128, 3139, 3143, 3145, 3147, 3149, 3150, 
	3152, 3153, 3171, 3177, 3181, 3182, 3184, 3186, 
	3188, 3189, 3196, 3203, 3210, 3217, 3224, 3231, 
	3238, 3246, 3253, 3260, 3267, 3274, 3281, 3288, 
	3295, 3302, 3354, 3364, 3367, 3368, 3372, 3374, 
	3375, 3376, 3377, 3381, 3383, 3387, 3390, 3392, 
	3394, 3397, 3403, 3406, 3407, 3410, 3412, 3415, 
	3418, 3420, 3422, 3426, 3450, 3459, 3461, 3462, 
	3466, 3469, 3470, 3471, 3472, 3473, 3477, 3483, 
	3485, 3487, 3489, 3491, 3494, 3496, 3498, 3500, 
	3502, 3505, 3506, 3508, 3512, 3515, 3526, 3527, 
	3532, 3538, 3548, 3549, 3550, 3552, 3554, 3555, 
	3556, 3562, 3563, 3564, 3565, 3571, 3573, 3574, 
	3575, 3576, 3582, 3587, 3593, 3598, 3599, 3600, 
	3605, 3610, 3612, 3618, 3626, 3630, 3634, 3638, 
	3639, 3646, 3653, 3660, 3661, 3669, 3677, 3685, 
	3693, 3701, 3702, 3707, 3712, 3713, 3718, 3722, 
	3732, 3740, 3750, 3760, 3770, 3780, 3790, 3800, 
	3808, 3818, 3828, 3838, 3848, 3858, 3859, 3860, 
	3864, 3865, 3875, 3886, 3897, 3898, 3900, 3901, 
	3911, 3924, 3935, 3946, 3957, 3968, 3979, 3990, 
	4001, 4011, 4021, 4032, 4043, 4054, 4065, 4076, 
	4088, 4099, 4110, 4121, 4132, 4144, 4155, 4166, 
	4177, 4188, 4199, 4210, 4222, 4233, 4244, 4255, 
	4266, 4278, 4289, 4301, 4312, 4324, 4336, 4347, 
	4358, 4370, 4381, 4392, 4404, 4415, 4426, 4437, 
	4448, 4461, 4472, 4483, 4494, 4505, 4518, 4529, 
	4540, 4551, 4562, 4572, 4576, 4588, 4599, 4610, 
	4622, 4633, 4644, 4655, 4667, 4678, 4689, 4700, 
	4713, 4724, 4735, 4746, 4757, 4768, 4779, 4790, 
	4802, 4813, 4824, 4835, 4846, 4857, 4858, 4861, 
	4870, 4874, 4875, 4877, 4879, 4881, 4882, 4898, 
	4907, 4911, 4912, 4914, 4916, 4918, 4919, 4980, 
	4988, 4990, 4991, 4995, 4996, 4999, 5001, 5003, 
	5018, 5024, 5026, 5028, 5032, 5033, 5034, 5037, 
	5040, 5043, 5045, 5050, 5053, 5069, 5076, 5080, 
	5084, 5085, 5087, 5088, 5093, 5098, 5103, 5108, 
	5111, 5112, 5114, 5115, 5120, 5125, 5130, 5135, 
	5140, 5147, 5154, 5161, 5169, 5174, 5182, 5187, 
	5189, 5192, 5194, 5198, 5200, 5203, 5210, 5219, 
	5220, 5230, 5240, 5250, 5260, 5270, 5280, 5281, 
	5283, 5284, 5292, 5303, 5312, 5321, 5330, 5339, 
	5348, 5357, 5366, 5374, 5382, 5391, 5400, 5409, 
	5417, 5425, 5434, 5443, 5453, 5462, 5471, 5480, 
	5489, 5499, 5508, 5517, 5526, 5535, 5544, 5553, 
	5563, 5572, 5581, 5590, 5599, 5608, 5623, 5630, 
	5640, 5649, 5658, 5667, 5676, 5685, 5693, 5703, 
	5712, 5722, 5731, 5741, 5750, 5759, 5769, 5778, 
	5787, 5796, 5805, 5815, 5824, 5833, 5842, 5851, 
	5862, 5871, 5880, 5889, 5898, 5907, 5918, 5927, 
	5936, 5945, 5954, 5964, 5973, 5982, 5991, 6001, 
	6010, 6019, 6028, 6037, 6046, 6056, 6065, 6074, 
	6083, 6094, 6103, 6112, 6121, 6130, 6139, 6148, 
	6157, 6166, 6176, 6185, 6194, 6203, 6212, 6221, 
	6230, 6231, 6234, 6235, 6241, 6247, 6249, 6252, 
	6254, 6257, 6260, 6263
};

static const short _lex_indicies[] = {
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 10, 11, 10, 0, 12, 
	12, 15, 14, 14, 14, 12, 14, 12, 
	14, 16, 14, 12, 12, 13, 12, 12, 
	12, 12, 12, 14, 17, 12, 12, 12, 
	12, 12, 13, 12, 12, 12, 12, 12, 
	13, 18, 18, 18, 20, 19, 18, 18, 
	22, 18, 23, 21, 18, 18, 18, 24, 
	21, 18, 18, 18, 26, 27, 25, 18, 
	18, 29, 18, 28, 18, 18, 18, 28, 
	18, 18, 18, 30, 19, 18, 18, 32, 
	18, 33, 34, 35, 31, 18, 18, 18, 
	31, 36, 37, 18, 37, 18, 18, 18, 
	18, 39, 40, 38, 18, 18, 22, 18, 
	24, 21, 18, 18, 18, 42, 42, 42, 
	41, 43, 43, 46, 45, 45, 45, 43, 
	45, 43, 45, 47, 45, 43, 43, 44, 
	43, 43, 43, 43, 43, 45, 48, 43, 
	43, 43, 43, 43, 44, 43, 43, 43, 
	43, 43, 44, 49, 49, 49, 51, 50, 
	49, 49, 53, 49, 54, 52, 49, 49, 
	49, 55, 52, 49, 49, 49, 57, 58, 
	56, 49, 49, 60, 49, 59, 49, 49, 
	49, 59, 49, 49, 49, 61, 50, 49, 
	49, 63, 49, 64, 65, 66, 62, 49, 
	49, 49, 62, 67, 68, 49, 68, 49, 
	49, 49, 49, 70, 71, 69, 49, 49, 
	53, 49, 55, 52, 49, 49, 49, 73, 
	73, 73, 72, 74, 74, 77, 76, 76, 
	76, 74, 76, 74, 76, 78, 76, 74, 
	74, 75, 74, 74, 74, 74, 74, 76, 
	79, 74, 74, 74, 74, 74, 75, 74, 
	74, 74, 74, 74, 75, 80, 80, 83, 
	82, 82, 82, 80, 82, 80, 82, 84, 
	82, 80, 80, 81, 80, 80, 80, 80, 
	80, 82, 85, 80, 80, 80, 80, 80, 
	81, 80, 80, 80, 80, 80, 81, 88, 
	88, 89, 87, 87, 87, 88, 87, 88, 
	87, 90, 87, 88, 88, 86, 88, 88, 
	88, 88, 88, 87, 92, 88, 88, 88, 
	88, 88, 91, 88, 88, 88, 88, 88, 
	93, 94, 94, 94, 94, 94, 95, 96, 
	96, 96, 97, 100, 101, 100, 98, 98, 
	98, 98, 98, 99, 101, 98, 98, 102, 
	105, 106, 105, 103, 103, 103, 103, 103, 
	104, 106, 103, 108, 107, 109, 107, 110, 
	107, 112, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 113, 121, 122, 118, 123, 
	124, 125, 126, 118, 127, 107, 128, 129, 
	130, 131, 132, 133, 127, 107, 112, 107, 
	107, 111, 134, 134, 135, 136, 137, 138, 
	139, 140, 141, 142, 135, 143, 144, 140, 
	145, 146, 147, 148, 140, 109, 107, 149, 
	150, 151, 152, 153, 154, 109, 107, 134, 
	107, 107, 104, 105, 106, 105, 107, 155, 
	107, 107, 107, 107, 104, 105, 106, 105, 
	107, 156, 107, 107, 107, 107, 104, 105, 
	106, 105, 107, 157, 107, 107, 107, 107, 
	104, 105, 106, 105, 107, 158, 107, 107, 
	107, 107, 104, 105, 106, 105, 107, 159, 
	107, 107, 107, 107, 104, 105, 106, 105, 
	107, 155, 107, 107, 107, 107, 104, 105, 
	106, 105, 107, 160, 107, 107, 107, 107, 
	104, 105, 106, 105, 107, 161, 162, 107, 
	107, 107, 107, 104, 105, 106, 105, 107, 
	163, 107, 107, 107, 107, 104, 105, 106, 
	105, 107, 164, 107, 107, 107, 107, 104, 
	105, 106, 105, 107, 155, 107, 107, 107, 
	107, 104, 105, 106, 105, 107, 165, 107, 
	107, 107, 107, 104, 105, 106, 105, 107, 
	155, 107, 107, 107, 107, 104, 105, 106, 
	105, 107, 166, 107, 107, 107, 107, 104, 
	105, 106, 105, 107, 167, 107, 107, 107, 
	107, 104, 105, 106, 105, 107, 159, 107, 
	107, 107, 107, 104, 169, 168, 170, 168, 
	171, 168, 140, 168, 172, 173, 168, 174, 
	168, 175, 168, 140, 168, 176, 168, 140, 
	168, 177, 168, 171, 168, 179, 178, 182, 
	182, 183, 184, 180, 185, 180, 182, 180, 
	180, 180, 181, 186, 180, 188, 188, 189, 
	190, 180, 191, 180, 188, 180, 180, 180, 
	187, 192, 193, 195, 194, 196, 194, 197, 
	194, 198, 194, 199, 194, 200, 200, 200, 
	202, 202, 201, 203, 192, 204, 204, 207, 
	206, 206, 206, 204, 206, 204, 206, 208, 
	206, 204, 204, 205, 204, 204, 204, 204, 
	204, 206, 209, 206, 206, 204, 210, 204, 
	204, 204, 204, 205, 204, 204, 204, 204, 
	205, 209, 204, 212, 213, 214, 203, 215, 
	214, 204, 204, 204, 211, 218, 217, 217, 
	217, 217, 217, 216, 220, 219, 204, 221, 
	212, 218, 217, 204, 221, 213, 212, 213, 
	215, 204, 204, 204, 211, 204, 221, 215, 
	222, 222, 222, 224, 223, 222, 222, 226, 
	222, 227, 225, 222, 222, 222, 228, 225, 
	222, 222, 222, 230, 231, 229, 222, 222, 
	233, 222, 232, 222, 222, 222, 232, 222, 
	222, 222, 234, 223, 222, 222, 236, 222, 
	237, 238, 239, 235, 222, 222, 222, 235, 
	240, 241, 222, 241, 222, 222, 222, 222, 
	243, 244, 242, 222, 222, 226, 222, 228, 
	225, 222, 222, 222, 246, 246, 246, 245, 
	248, 249, 250, 248, 192, 192, 192, 192, 
	192, 247, 248, 249, 250, 248, 251, 204, 
	204, 204, 204, 204, 247, 248, 249, 250, 
	248, 252, 204, 204, 204, 204, 204, 247, 
	248, 249, 250, 248, 253, 204, 204, 204, 
	204, 204, 247, 248, 249, 250, 248, 253, 
	204, 204, 204, 204, 204, 247, 256, 257, 
	256, 254, 254, 254, 254, 254, 255, 257, 
	254, 254, 258, 259, 259, 259, 259, 259, 
	260, 262, 262, 263, 261, 263, 261, 264, 
	261, 266, 265, 267, 265, 259, 259, 259, 
	259, 259, 268, 269, 265, 271, 270, 272, 
	273, 274, 270, 265, 276, 275, 277, 278, 
	279, 275, 265, 282, 281, 283, 284, 285, 
	281, 280, 288, 287, 289, 290, 291, 287, 
	286, 288, 287, 289, 292, 291, 287, 286, 
	293, 287, 289, 290, 291, 287, 286, 294, 
	265, 271, 265, 296, 296, 297, 298, 296, 
	295, 299, 295, 301, 301, 303, 301, 302, 
	304, 305, 306, 307, 302, 300, 302, 302, 
	302, 308, 309, 310, 311, 312, 313, 315, 
	314, 318, 317, 317, 316, 303, 314, 319, 
	314, 321, 321, 323, 321, 322, 324, 325, 
	322, 320, 322, 322, 322, 326, 328, 329, 
	330, 327, 331, 331, 331, 331, 331, 13, 
	16, 331, 334, 334, 334, 336, 337, 338, 
	339, 340, 335, 333, 341, 342, 344, 343, 
	345, 343, 343, 346, 346, 346, 346, 39, 
	347, 38, 348, 349, 350, 350, 350, 350, 
	39, 351, 38, 37, 350, 352, 353, 354, 
	354, 354, 354, 26, 355, 25, 350, 350, 
	350, 356, 19, 346, 346, 346, 26, 27, 
	25, 346, 346, 346, 358, 357, 359, 360, 
	360, 360, 360, 361, 357, 360, 360, 360, 
	356, 19, 362, 360, 360, 360, 360, 26, 
	27, 25, 363, 363, 363, 366, 365, 365, 
	365, 364, 363, 363, 363, 367, 363, 363, 
	363, 368, 363, 363, 363, 369, 363, 363, 
	363, 363, 370, 370, 370, 367, 363, 363, 
	363, 371, 371, 371, 368, 363, 363, 363, 
	372, 372, 372, 369, 373, 376, 376, 376, 
	367, 377, 377, 377, 375, 376, 376, 376, 
	380, 379, 379, 379, 378, 376, 376, 376, 
	383, 382, 382, 382, 381, 376, 376, 376, 
	376, 385, 385, 385, 384, 376, 376, 376, 
	376, 385, 385, 385, 384, 386, 376, 376, 
	376, 386, 385, 376, 376, 376, 374, 385, 
	374, 376, 376, 376, 369, 382, 374, 374, 
	374, 369, 376, 376, 387, 376, 387, 389, 
	388, 388, 388, 378, 376, 376, 376, 376, 
	390, 390, 390, 384, 376, 376, 387, 376, 
	387, 389, 391, 391, 391, 384, 376, 376, 
	387, 376, 387, 389, 392, 392, 392, 384, 
	376, 376, 387, 376, 387, 389, 393, 393, 
	393, 384, 376, 376, 387, 376, 387, 389, 
	394, 394, 394, 384, 376, 376, 387, 376, 
	387, 389, 395, 395, 395, 384, 376, 376, 
	387, 376, 387, 389, 396, 396, 396, 384, 
	376, 376, 376, 386, 396, 396, 396, 384, 
	397, 376, 376, 387, 376, 387, 389, 392, 
	392, 392, 381, 398, 400, 400, 400, 399, 
	399, 402, 402, 403, 402, 404, 405, 401, 
	407, 408, 409, 406, 410, 410, 410, 410, 
	410, 44, 47, 410, 413, 413, 413, 415, 
	416, 417, 418, 419, 414, 412, 420, 421, 
	423, 422, 424, 422, 422, 425, 425, 425, 
	425, 70, 426, 69, 427, 428, 429, 429, 
	429, 429, 70, 430, 69, 68, 429, 431, 
	432, 433, 433, 433, 433, 57, 434, 56, 
	429, 429, 429, 435, 50, 425, 425, 425, 
	57, 58, 56, 425, 425, 425, 437, 436, 
	438, 439, 439, 439, 439, 440, 436, 439, 
	439, 439, 435, 50, 441, 439, 439, 439, 
	439, 57, 58, 56, 442, 442, 442, 445, 
	444, 444, 444, 443, 442, 442, 442, 446, 
	442, 442, 442, 447, 442, 442, 442, 448, 
	442, 442, 442, 442, 449, 449, 449, 446, 
	442, 442, 442, 450, 450, 450, 447, 442, 
	442, 442, 451, 451, 451, 448, 452, 455, 
	455, 455, 446, 456, 456, 456, 454, 455, 
	455, 455, 459, 458, 458, 458, 457, 455, 
	455, 455, 462, 461, 461, 461, 460, 455, 
	455, 455, 455, 464, 464, 464, 463, 455, 
	455, 455, 455, 464, 464, 464, 463, 465, 
	455, 455, 455, 465, 464, 455, 455, 455, 
	453, 464, 453, 455, 455, 455, 448, 461, 
	453, 453, 453, 448, 455, 455, 466, 455, 
	466, 468, 467, 467, 467, 457, 455, 455, 
	455, 455, 469, 469, 469, 463, 455, 455, 
	466, 455, 466, 468, 470, 470, 470, 463, 
	455, 455, 466, 455, 466, 468, 471, 471, 
	471, 463, 455, 455, 466, 455, 466, 468, 
	472, 472, 472, 463, 455, 455, 466, 455, 
	466, 468, 473, 473, 473, 463, 455, 455, 
	466, 455, 466, 468, 474, 474, 474, 463, 
	455, 455, 466, 455, 466, 468, 475, 475, 
	475, 463, 455, 455, 455, 465, 475, 475, 
	475, 463, 476, 455, 455, 466, 455, 466, 
	468, 471, 471, 471, 460, 477, 479, 479, 
	479, 478, 478, 481, 481, 483, 481, 482, 
	484, 482, 480, 482, 482, 482, 485, 486, 
	486, 486, 487, 489, 489, 490, 489, 491, 
	488, 492, 492, 494, 492, 493, 496, 496, 
	497, 496, 498, 495, 500, 501, 502, 499, 
	503, 503, 503, 503, 503, 75, 78, 503, 
	505, 505, 506, 505, 504, 508, 508, 510, 
	508, 509, 511, 509, 507, 509, 509, 509, 
	512, 514, 515, 516, 513, 517, 517, 517, 
	517, 517, 81, 84, 517, 519, 519, 521, 
	519, 520, 520, 518, 520, 520, 520, 522, 
	524, 524, 523, 524, 524, 525, 526, 527, 
	88, 528, 528, 528, 528, 528, 86, 90, 
	528, 529, 529, 529, 529, 529, 91, 530, 
	530, 530, 530, 530, 93, 532, 532, 535, 
	532, 534, 536, 537, 538, 539, 540, 541, 
	542, 542, 543, 544, 545, 546, 547, 549, 
	550, 551, 552, 533, 553, 554, 555, 556, 
	557, 558, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 568, 569, 570, 542, 533, 
	534, 533, 548, 543, 533, 531, 572, 572, 
	572, 571, 571, 571, 571, 571, 531, 534, 
	534, 534, 573, 574, 543, 543, 543, 575, 
	576, 577, 578, 579, 580, 580, 582, 95, 
	95, 95, 580, 95, 580, 95, 583, 95, 
	580, 580, 581, 584, 584, 584, 584, 584, 
	581, 583, 584, 585, 575, 543, 575, 543, 
	575, 543, 575, 587, 586, 543, 588, 575, 
	543, 575, 589, 543, 543, 580, 543, 575, 
	543, 575, 572, 572, 572, 571, 571, 571, 
	571, 571, 548, 572, 572, 572, 591, 590, 
	590, 590, 590, 590, 548, 572, 572, 572, 
	592, 590, 590, 590, 590, 590, 548, 572, 
	572, 572, 593, 590, 590, 590, 590, 590, 
	548, 572, 572, 572, 594, 590, 590, 590, 
	590, 590, 548, 572, 572, 572, 595, 590, 
	590, 590, 590, 590, 548, 572, 572, 572, 
	594, 590, 590, 590, 590, 590, 548, 589, 
	580, 535, 580, 572, 572, 572, 597, 596, 
	596, 596, 596, 531, 572, 572, 572, 598, 
	599, 600, 596, 596, 596, 596, 596, 531, 
	572, 572, 572, 601, 596, 596, 596, 596, 
	596, 531, 572, 572, 572, 602, 596, 596, 
	596, 596, 596, 531, 572, 572, 572, 603, 
	596, 596, 596, 596, 596, 531, 572, 572, 
	572, 604, 596, 596, 596, 596, 596, 531, 
	572, 572, 572, 605, 596, 596, 596, 596, 
	596, 531, 572, 572, 572, 606, 596, 596, 
	596, 596, 596, 531, 572, 572, 572, 607, 
	596, 596, 596, 596, 596, 531, 572, 572, 
	572, 608, 596, 596, 596, 596, 531, 572, 
	572, 572, 609, 596, 596, 596, 596, 531, 
	572, 572, 572, 610, 596, 596, 596, 596, 
	596, 531, 572, 572, 572, 611, 596, 596, 
	596, 596, 596, 531, 572, 572, 572, 607, 
	596, 596, 596, 596, 596, 531, 572, 572, 
	572, 612, 596, 596, 596, 596, 596, 531, 
	572, 572, 572, 611, 596, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 613, 614, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 615, 596, 596, 596, 596, 531, 572, 
	572, 572, 596, 616, 596, 596, 596, 596, 
	531, 572, 572, 572, 596, 609, 596, 596, 
	596, 596, 531, 572, 572, 572, 596, 609, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 617, 618, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 619, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 620, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	609, 596, 596, 596, 596, 531, 572, 572, 
	572, 596, 621, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 622, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 609, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	623, 624, 596, 596, 596, 596, 531, 572, 
	572, 572, 596, 625, 596, 596, 596, 596, 
	531, 572, 572, 572, 596, 609, 596, 596, 
	596, 596, 531, 572, 572, 572, 596, 626, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 616, 596, 596, 596, 596, 531, 572, 
	572, 572, 596, 627, 609, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 628, 596, 
	596, 596, 596, 531, 572, 572, 572, 629, 
	630, 629, 629, 629, 629, 531, 572, 572, 
	572, 596, 631, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 632, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 633, 596, 
	596, 596, 596, 531, 572, 572, 634, 596, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 635, 636, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 637, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 609, 638, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 609, 596, 596, 596, 596, 531, 572, 
	572, 572, 596, 609, 639, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 640, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	625, 596, 596, 596, 596, 531, 572, 572, 
	572, 596, 641, 563, 596, 596, 596, 596, 
	531, 572, 572, 572, 596, 623, 596, 596, 
	596, 596, 531, 572, 572, 572, 596, 609, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 609, 609, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 642, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 643, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	644, 596, 596, 596, 596, 531, 572, 572, 
	572, 596, 625, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 645, 646, 647, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	647, 596, 596, 596, 596, 531, 572, 572, 
	572, 596, 609, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 609, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 648, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	649, 650, 651, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 609, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 652, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	625, 596, 596, 596, 596, 531, 572, 572, 
	572, 596, 653, 654, 596, 596, 596, 596, 
	531, 572, 572, 572, 596, 609, 596, 596, 
	596, 596, 531, 572, 572, 572, 596, 620, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 655, 656, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 638, 596, 596, 596, 
	596, 531, 572, 572, 572, 596, 657, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	563, 596, 596, 596, 596, 531, 572, 572, 
	572, 596, 658, 652, 596, 596, 596, 596, 
	531, 572, 572, 572, 596, 620, 596, 596, 
	596, 596, 531, 572, 572, 572, 596, 659, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 660, 661, 662, 596, 596, 596, 596, 
	531, 572, 572, 572, 596, 638, 596, 596, 
	596, 596, 531, 572, 572, 572, 596, 626, 
	596, 596, 596, 596, 531, 572, 572, 572, 
	596, 646, 596, 596, 596, 596, 531, 572, 
	572, 572, 596, 663, 596, 596, 596, 596, 
	531, 572, 572, 572, 596, 620, 644, 596, 
	596, 596, 596, 531, 572, 572, 572, 596, 
	664, 596, 596, 596, 596, 531, 572, 572, 
	572, 596, 665, 596, 596, 596, 596, 531, 
	572, 572, 572, 596, 614, 596, 596, 596, 
	596, 531, 543, 575, 667, 667, 669, 667, 
	669, 670, 671, 668, 668, 669, 668, 668, 
	668, 666, 100, 101, 100, 672, 672, 672, 
	672, 672, 99, 669, 669, 669, 673, 674, 
	675, 676, 677, 678, 672, 679, 681, 681, 
	684, 681, 683, 685, 686, 687, 688, 689, 
	690, 690, 687, 691, 692, 693, 695, 696, 
	682, 687, 687, 697, 690, 682, 683, 682, 
	694, 682, 680, 699, 699, 698, 698, 698, 
	698, 698, 680, 701, 700, 702, 683, 683, 
	683, 703, 704, 687, 687, 687, 705, 706, 
	707, 708, 709, 687, 705, 687, 705, 687, 
	705, 687, 710, 705, 687, 705, 712, 687, 
	687, 711, 687, 705, 687, 705, 699, 699, 
	713, 713, 713, 713, 713, 694, 712, 711, 
	684, 711, 687, 705, 715, 715, 717, 715, 
	716, 718, 109, 719, 720, 721, 140, 722, 
	142, 723, 724, 140, 725, 726, 727, 109, 
	728, 729, 730, 731, 153, 154, 109, 716, 
	109, 140, 714, 716, 716, 135, 136, 137, 
	138, 139, 140, 141, 142, 135, 143, 144, 
	140, 145, 146, 147, 148, 140, 109, 732, 
	149, 150, 151, 152, 153, 154, 109, 732, 
	716, 732, 732, 104, 733, 733, 735, 733, 
	140, 140, 140, 734, 735, 140, 109, 140, 
	140, 140, 103, 735, 140, 140, 140, 103, 
	736, 735, 140, 738, 140, 140, 737, 735, 
	140, 140, 140, 103, 739, 733, 140, 733, 
	741, 740, 744, 743, 743, 742, 745, 105, 
	106, 105, 733, 733, 733, 733, 733, 104, 
	746, 735, 140, 140, 109, 140, 733, 747, 
	748, 749, 750, 751, 752, 735, 140, 109, 
	140, 140, 733, 140, 740, 109, 753, 109, 
	753, 755, 754, 754, 742, 756, 753, 112, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 113, 121, 122, 118, 123, 124, 125, 
	126, 118, 127, 757, 128, 129, 130, 131, 
	132, 133, 127, 757, 112, 757, 757, 111, 
	140, 753, 758, 753, 759, 753, 760, 753, 
	761, 761, 762, 761, 762, 763, 179, 185, 
	179, 762, 179, 179, 179, 181, 764, 179, 
	764, 178, 178, 178, 178, 178, 181, 182, 
	182, 183, 184, 765, 185, 765, 182, 765, 
	765, 765, 181, 766, 764, 179, 764, 765, 
	767, 765, 765, 765, 765, 181, 186, 765, 
	769, 769, 770, 769, 770, 771, 772, 773, 
	774, 770, 768, 770, 770, 770, 775, 776, 
	777, 778, 779, 781, 780, 782, 783, 780, 
	784, 786, 786, 789, 786, 788, 790, 791, 
	787, 792, 793, 794, 795, 787, 788, 787, 
	787, 787, 785, 796, 796, 796, 796, 796, 
	785, 788, 788, 788, 797, 798, 799, 800, 
	801, 802, 804, 803, 805, 806, 807, 806, 
	806, 806, 806, 785, 806, 808, 806, 806, 
	806, 806, 785, 806, 809, 806, 806, 806, 
	806, 785, 806, 810, 806, 806, 806, 806, 
	785, 806, 811, 806, 806, 806, 806, 785, 
	806, 807, 806, 806, 806, 806, 785, 806, 
	812, 806, 806, 806, 806, 785, 806, 813, 
	814, 806, 806, 806, 806, 785, 806, 815, 
	806, 806, 806, 806, 785, 806, 816, 806, 
	806, 806, 806, 785, 806, 807, 806, 806, 
	806, 806, 785, 806, 817, 806, 806, 806, 
	806, 785, 806, 807, 806, 806, 806, 806, 
	785, 806, 818, 806, 806, 806, 806, 785, 
	806, 819, 806, 806, 806, 806, 785, 806, 
	811, 806, 806, 806, 806, 785, 821, 821, 
	823, 821, 822, 824, 825, 826, 827, 828, 
	829, 830, 831, 832, 833, 834, 835, 836, 
	837, 838, 840, 841, 842, 843, 844, 845, 
	846, 847, 848, 849, 850, 851, 852, 853, 
	854, 855, 856, 857, 858, 859, 860, 861, 
	862, 863, 844, 203, 822, 203, 839, 203, 
	203, 820, 248, 249, 250, 248, 192, 192, 
	192, 192, 192, 820, 865, 866, 864, 867, 
	869, 870, 871, 868, 873, 872, 874, 875, 
	876, 822, 822, 822, 877, 879, 878, 882, 
	881, 881, 880, 203, 203, 883, 884, 885, 
	886, 887, 890, 890, 889, 891, 891, 891, 
	202, 202, 201, 893, 203, 892, 894, 896, 
	203, 895, 203, 192, 203, 897, 892, 897, 
	203, 892, 898, 883, 203, 883, 883, 883, 
	883, 899, 901, 902, 903, 206, 904, 902, 
	905, 906, 906, 206, 907, 908, 909, 910, 
	911, 912, 206, 206, 913, 906, 883, 883, 
	883, 900, 915, 916, 915, 914, 914, 914, 
	914, 914, 900, 918, 917, 919, 921, 922, 
	923, 920, 925, 926, 924, 927, 928, 929, 
	930, 206, 206, 206, 914, 914, 914, 914, 
	914, 914, 205, 208, 914, 206, 914, 206, 
	914, 206, 914, 206, 931, 914, 206, 914, 
	206, 914, 206, 914, 206, 914, 932, 933, 
	883, 934, 203, 883, 844, 203, 203, 883, 
	203, 893, 883, 937, 937, 939, 937, 938, 
	941, 940, 938, 940, 940, 936, 942, 942, 
	942, 942, 942, 943, 944, 944, 944, 944, 
	944, 945, 948, 948, 948, 950, 951, 952, 
	953, 954, 949, 947, 955, 956, 958, 957, 
	959, 957, 957, 960, 960, 960, 960, 243, 
	961, 242, 962, 963, 964, 964, 964, 964, 
	243, 965, 242, 241, 964, 966, 967, 968, 
	968, 968, 968, 230, 969, 229, 964, 964, 
	964, 970, 223, 960, 960, 960, 230, 231, 
	229, 960, 960, 960, 972, 971, 973, 974, 
	974, 974, 974, 975, 971, 974, 974, 974, 
	970, 223, 976, 974, 974, 974, 974, 230, 
	231, 229, 977, 977, 977, 980, 979, 979, 
	979, 978, 977, 977, 977, 981, 977, 977, 
	977, 982, 977, 977, 977, 983, 977, 977, 
	977, 977, 984, 984, 984, 981, 977, 977, 
	977, 985, 985, 985, 982, 977, 977, 977, 
	986, 986, 986, 983, 987, 990, 990, 990, 
	981, 991, 991, 991, 989, 990, 990, 990, 
	994, 993, 993, 993, 992, 990, 990, 990, 
	997, 996, 996, 996, 995, 990, 990, 990, 
	990, 999, 999, 999, 998, 990, 990, 990, 
	990, 999, 999, 999, 998, 1000, 990, 990, 
	990, 1000, 999, 990, 990, 990, 988, 999, 
	988, 990, 990, 990, 983, 996, 988, 988, 
	988, 983, 990, 990, 1001, 990, 1001, 1003, 
	1002, 1002, 1002, 992, 990, 990, 990, 990, 
	1004, 1004, 1004, 998, 990, 990, 1001, 990, 
	1001, 1000, 1005, 1005, 1005, 998, 990, 990, 
	1001, 990, 1001, 1000, 1006, 1006, 1006, 998, 
	990, 990, 1001, 990, 1001, 1000, 1007, 1007, 
	1007, 998, 990, 990, 1001, 990, 1001, 1000, 
	1008, 1008, 1008, 998, 990, 990, 1001, 990, 
	1001, 1000, 1009, 1009, 1009, 998, 990, 990, 
	1001, 990, 1001, 1000, 1010, 1010, 1010, 998, 
	990, 990, 990, 1000, 1010, 1010, 1010, 998, 
	990, 990, 1001, 990, 1001, 1003, 1011, 1011, 
	1011, 995, 990, 990, 1001, 990, 1001, 1003, 
	1012, 1012, 1012, 998, 990, 990, 1001, 990, 
	1001, 1003, 1013, 1013, 1013, 998, 990, 990, 
	1001, 990, 1001, 1003, 1014, 1014, 1014, 998, 
	990, 990, 1001, 990, 1001, 1003, 1010, 1010, 
	1010, 998, 1015, 1016, 1018, 1018, 1018, 1017, 
	1017, 248, 249, 250, 248, 192, 192, 192, 
	192, 192, 247, 248, 249, 250, 248, 1019, 
	883, 883, 883, 883, 883, 247, 248, 249, 
	250, 248, 1020, 883, 883, 883, 883, 883, 
	247, 1021, 1022, 883, 878, 248, 249, 250, 
	248, 1024, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1025, 1026, 1027, 1023, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1028, 1023, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1029, 1023, 1023, 1023, 1023, 
	1023, 820, 248, 249, 250, 248, 1030, 1023, 
	1023, 1023, 1023, 1023, 820, 248, 249, 250, 
	248, 1031, 1023, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1032, 1023, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1033, 
	1023, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1034, 1023, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1035, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1036, 
	1023, 1023, 1023, 1023, 820, 248, 249, 250, 
	248, 1037, 1023, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1038, 1023, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1034, 
	1023, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1039, 1023, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1038, 1023, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1040, 1041, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1042, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1023, 
	1043, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1036, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1036, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1044, 1045, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1046, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1023, 
	1047, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1036, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1048, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1049, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1023, 1036, 1023, 1023, 1023, 
	1023, 820, 248, 249, 250, 248, 1023, 1050, 
	1051, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1052, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1036, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1053, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1023, 1043, 1023, 1023, 1023, 
	1023, 820, 248, 249, 250, 248, 1023, 1054, 
	1036, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1036, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1055, 1056, 
	1023, 1023, 1023, 1023, 820, 248, 249, 250, 
	248, 1023, 1057, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1036, 1054, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1036, 1058, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1059, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1023, 
	1052, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1060, 855, 1023, 1023, 1023, 
	1023, 820, 248, 249, 250, 248, 1023, 1050, 
	1023, 1023, 1023, 1023, 820, 248, 249, 250, 
	248, 1023, 1036, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1061, 1036, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1062, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1023, 1063, 1023, 1023, 1023, 
	1023, 820, 248, 249, 250, 248, 1023, 1064, 
	1023, 1023, 1023, 1023, 820, 248, 249, 250, 
	248, 1023, 1052, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1065, 1066, 1067, 
	1023, 1023, 1023, 1023, 820, 248, 249, 250, 
	248, 1023, 1067, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1036, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1023, 
	1036, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1068, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1069, 1070, 
	1071, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1036, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1072, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1073, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1023, 1074, 1023, 1023, 1023, 
	1023, 820, 1077, 1078, 1079, 1077, 1075, 1075, 
	1075, 1075, 1075, 1076, 869, 1080, 871, 868, 
	248, 249, 250, 248, 1023, 1081, 1082, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1036, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1023, 1047, 1023, 1023, 1023, 
	1023, 820, 248, 249, 250, 248, 1023, 1083, 
	1084, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1054, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1085, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 855, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1023, 1086, 1087, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1023, 
	1047, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1052, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1088, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1089, 1090, 1091, 1023, 1023, 1023, 1023, 
	820, 248, 249, 250, 248, 1023, 1054, 1023, 
	1023, 1023, 1023, 820, 248, 249, 250, 248, 
	1023, 1092, 1023, 1023, 1023, 1023, 820, 248, 
	249, 250, 248, 1023, 1093, 1023, 1023, 1023, 
	1023, 820, 248, 249, 250, 248, 1023, 1061, 
	1023, 1023, 1023, 1023, 820, 248, 249, 250, 
	248, 1023, 1094, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1061, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1023, 
	1095, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1047, 1096, 1023, 1023, 1023, 
	1023, 820, 248, 249, 250, 248, 1023, 1097, 
	1023, 1023, 1023, 1023, 820, 248, 249, 250, 
	248, 1023, 1061, 1023, 1023, 1023, 1023, 820, 
	248, 249, 250, 248, 1023, 1098, 1023, 1023, 
	1023, 1023, 820, 248, 249, 250, 248, 1023, 
	1099, 1023, 1023, 1023, 1023, 820, 248, 249, 
	250, 248, 1023, 1041, 1023, 1023, 1023, 1023, 
	820, 1100, 203, 893, 883, 1102, 1102, 1104, 
	1102, 1103, 1105, 1106, 1103, 1101, 1103, 1103, 
	1103, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 
	1113, 1115, 1117, 1117, 1120, 1117, 1119, 1121, 
	1122, 1121, 1123, 1118, 1118, 1119, 1118, 1118, 
	1118, 1116, 256, 257, 256, 1124, 1124, 1124, 
	1124, 1124, 255, 1119, 1119, 1119, 1125, 1126, 
	1127, 1128, 1129, 1130, 1131, 1124, 1132, 1134, 
	1134, 1137, 1134, 1136, 1138, 1140, 1141, 1142, 
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 
	1161, 1162, 1163, 1164, 1142, 1165, 1139, 1166, 
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 
	1183, 1184, 1142, 1135, 1135, 1136, 1135, 1139, 
	1142, 1151, 1159, 1133, 1185, 1185, 265, 265, 
	265, 265, 265, 1133, 1187, 1186, 1188, 1136, 
	1136, 1136, 1189, 1190, 1192, 1192, 1191, 1193, 
	1194, 1195, 1196, 1197, 1197, 1198, 260, 260, 
	260, 1197, 260, 1197, 260, 1199, 260, 1197, 
	1197, 268, 1200, 1200, 1200, 1200, 1200, 268, 
	1199, 1200, 1201, 1191, 1142, 1202, 1201, 1191, 
	1203, 1204, 1142, 1201, 1191, 1201, 1205, 1191, 
	1207, 264, 1206, 1147, 1208, 1210, 1211, 1210, 
	264, 1209, 262, 263, 1209, 1213, 1215, 1216, 
	1217, 1218, 1219, 1220, 1215, 1216, 1217, 1221, 
	1218, 1222, 1219, 1214, 1212, 1224, 1225, 1224, 
	1226, 1227, 266, 1223, 1228, 1228, 267, 265, 
	1228, 1230, 267, 1229, 1231, 1233, 1232, 1234, 
	1220, 1221, 1222, 1214, 1212, 1236, 1221, 1222, 
	1235, 1212, 1239, 1240, 1241, 1238, 1237, 1242, 
	1240, 1241, 1238, 1237, 1240, 1241, 1237, 1243, 
	1245, 1244, 1246, 1249, 1250, 1251, 1248, 1247, 
	1253, 1240, 1241, 1252, 1237, 1242, 1240, 1241, 
	1252, 1237, 1256, 1257, 1258, 1255, 1254, 1261, 
	1262, 1263, 1260, 1259, 1266, 1267, 1268, 1265, 
	1265, 1265, 1264, 1270, 1240, 1241, 1269, 1269, 
	1269, 1237, 1242, 1240, 1241, 1269, 1269, 1269, 
	1237, 1272, 1274, 1275, 1274, 1276, 1277, 1273, 
	1271, 1279, 1276, 1277, 1278, 1271, 1280, 1282, 
	1283, 1282, 1240, 1241, 1281, 1237, 1242, 1240, 
	1241, 1281, 1237, 1202, 1208, 1142, 1284, 1191, 
	1192, 1191, 1285, 1192, 1192, 1208, 1192, 1191, 
	1192, 1142, 1191, 1286, 1197, 1197, 1197, 1197, 
	1197, 268, 1185, 1287, 1185, 265, 265, 265, 
	265, 265, 1159, 1288, 1185, 1287, 1185, 1290, 
	1289, 1289, 1289, 1289, 1289, 1159, 1185, 1287, 
	1185, 1291, 1289, 1289, 1289, 1289, 1289, 1159, 
	1185, 1287, 1185, 1292, 1289, 1289, 1289, 1289, 
	1289, 1159, 1185, 1287, 1185, 1293, 1289, 1289, 
	1289, 1289, 1289, 1159, 1185, 1287, 1185, 1294, 
	1289, 1289, 1289, 1289, 1289, 1159, 1185, 1287, 
	1185, 1293, 1289, 1289, 1289, 1289, 1289, 1159, 
	1295, 1297, 1296, 1298, 1185, 1185, 1300, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1301, 1302, 
	1303, 1299, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1304, 1299, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1305, 1299, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1306, 1299, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1307, 1299, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1308, 1299, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1309, 1299, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1310, 
	1299, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1311, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1312, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1313, 1299, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1314, 1299, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1315, 1299, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1316, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1317, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1318, 1299, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1314, 1299, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1319, 1320, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1321, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1322, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1323, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1324, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1325, 1326, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1327, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1299, 1328, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1324, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1329, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1330, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1331, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1332, 1333, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1334, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1299, 1324, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1335, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1336, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1337, 1299, 1299, 1299, 1299, 1133, 
	271, 270, 1185, 272, 273, 1185, 274, 1338, 
	1338, 270, 1338, 1338, 1338, 1338, 1133, 288, 
	287, 289, 292, 291, 287, 286, 1185, 1185, 
	1299, 1340, 1341, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1342, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1343, 1344, 1343, 1343, 1343, 
	1343, 1133, 1185, 1185, 1299, 1345, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1346, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1299, 1347, 
	1299, 1299, 1299, 1299, 1133, 1185, 1348, 1299, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1349, 1350, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1351, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1324, 1352, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1324, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1317, 1353, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1354, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1334, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1355, 1175, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1356, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1357, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1317, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1299, 1324, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1358, 1324, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1359, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1360, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1361, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1334, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1362, 1363, 
	1364, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1365, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1331, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1317, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1366, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1367, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1368, 1369, 
	1370, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1317, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1371, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1372, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1358, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1373, 1374, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1299, 1317, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1375, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1331, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1376, 1377, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1378, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1317, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1379, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1299, 1380, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1366, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1381, 1382, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1328, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1357, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1383, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1384, 1385, 
	1386, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1387, 1299, 1299, 1299, 1299, 1133, 1185, 
	1185, 1299, 1323, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1388, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1389, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1358, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1390, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1299, 1358, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1391, 1299, 1299, 1299, 1299, 1133, 1185, 1185, 
	1299, 1328, 1392, 1299, 1299, 1299, 1299, 1133, 
	1185, 1185, 1299, 1393, 1299, 1299, 1299, 1299, 
	1133, 1185, 1185, 1299, 1358, 1299, 1299, 1299, 
	1299, 1133, 1185, 1185, 1299, 1394, 1299, 1299, 
	1299, 1299, 1133, 1185, 1185, 1299, 1395, 1299, 
	1299, 1299, 1299, 1133, 1185, 1185, 1299, 1396, 
	1299, 1299, 1299, 1299, 1133, 1185, 1185, 1299, 
	1366, 1299, 1299, 1299, 1299, 1133, 1397, 1201, 
	1142, 1191, 1398, 1400, 1400, 1401, 298, 1400, 
	1399, 296, 296, 297, 298, 296, 1402, 299, 
	1402, 1404, 1405, 1403, 1404, 1403, 1404, 1407, 
	1403, 1404, 1408, 1403, 1404, 1409, 1403, 1411, 
	1409, 0
};

static const short _lex_trans_targs[] = {
	165, 2, 3, 4, 171, 6, 7, 8, 
	9, 10, 165, 165, 174, 177, 174, 12, 
	178, 14, 174, 185, 186, 189, 190, 196, 
	191, 192, 193, 19, 194, 195, 198, 200, 
	201, 202, 203, 204, 25, 18, 187, 188, 
	27, 236, 237, 239, 241, 239, 30, 242, 
	32, 239, 249, 250, 253, 254, 260, 255, 
	256, 257, 37, 258, 259, 262, 264, 265, 
	266, 267, 268, 43, 36, 251, 252, 45, 
	300, 301, 308, 310, 308, 48, 311, 50, 
	313, 316, 313, 52, 317, 54, 323, 322, 
	0, 56, 324, 325, 58, 326, 327, 327, 
	327, 327, 440, 61, 62, 63, 440, 468, 
	64, 65, 468, 468, 472, 472, 69, 64, 
	70, 470, 471, 473, 474, 472, 468, 475, 
	476, 478, 66, 67, 479, 480, 68, 472, 
	71, 72, 77, 84, 482, 483, 70, 470, 
	471, 473, 474, 472, 468, 475, 476, 478, 
	66, 67, 479, 480, 68, 71, 72, 77, 
	84, 482, 483, 481, 73, 74, 75, 76, 
	78, 79, 82, 80, 81, 83, 85, 86, 
	468, 88, 89, 90, 92, 95, 93, 94, 
	96, 98, 499, 499, 499, 500, 100, 502, 
	101, 503, 102, 500, 100, 502, 101, 503, 
	537, 537, 537, 105, 106, 107, 108, 548, 
	537, 537, 553, 537, 537, 574, 537, 112, 
	575, 581, 115, 118, 120, 122, 123, 124, 
	118, 119, 585, 119, 585, 121, 537, 599, 
	600, 603, 604, 610, 605, 606, 607, 129, 
	608, 609, 612, 614, 615, 616, 617, 618, 
	135, 128, 601, 602, 137, 654, 655, 139, 
	539, 103, 541, 141, 142, 657, 758, 144, 
	145, 146, 758, 766, 766, 766, 149, 787, 
	786, 766, 789, 791, 776, 823, 155, 156, 
	157, 161, 162, 155, 156, 157, 161, 162, 
	158, 158, 156, 157, 159, 160, 158, 158, 
	156, 157, 159, 160, 870, 156, 766, 939, 
	163, 164, 939, 939, 165, 165, 166, 167, 
	168, 170, 172, 173, 165, 165, 165, 169, 
	165, 169, 165, 1, 165, 165, 165, 5, 
	174, 174, 175, 174, 176, 179, 174, 174, 
	11, 13, 174, 174, 174, 180, 181, 182, 
	15, 21, 26, 205, 28, 174, 174, 174, 
	183, 184, 174, 16, 174, 174, 174, 17, 
	174, 174, 174, 20, 197, 199, 22, 174, 
	174, 23, 24, 174, 206, 210, 214, 207, 
	208, 209, 211, 212, 213, 174, 174, 215, 
	219, 225, 216, 223, 224, 217, 221, 222, 
	218, 220, 174, 226, 235, 234, 227, 228, 
	229, 230, 231, 232, 233, 174, 174, 174, 
	238, 239, 239, 239, 240, 243, 239, 29, 
	31, 239, 239, 239, 244, 245, 246, 33, 
	39, 44, 269, 46, 239, 239, 239, 247, 
	248, 239, 34, 239, 239, 239, 35, 239, 
	239, 239, 38, 261, 263, 40, 239, 239, 
	41, 42, 239, 270, 274, 278, 271, 272, 
	273, 275, 276, 277, 239, 239, 279, 283, 
	289, 280, 287, 288, 281, 285, 286, 282, 
	284, 239, 290, 299, 298, 291, 292, 293, 
	294, 295, 296, 297, 239, 239, 239, 302, 
	303, 303, 304, 303, 305, 303, 303, 303, 
	306, 306, 306, 307, 306, 306, 306, 308, 
	308, 308, 309, 308, 47, 49, 308, 308, 
	312, 312, 312, 313, 313, 314, 313, 315, 
	313, 313, 51, 53, 313, 313, 318, 318, 
	319, 318, 318, 320, 321, 320, 55, 57, 
	322, 322, 322, 328, 327, 327, 329, 330, 
	331, 332, 334, 337, 338, 339, 340, 327, 
	341, 342, 344, 346, 347, 348, 352, 354, 
	355, 356, 372, 377, 384, 389, 396, 403, 
	406, 407, 411, 405, 415, 423, 427, 429, 
	434, 436, 439, 327, 327, 327, 327, 327, 
	327, 333, 327, 333, 327, 335, 59, 336, 
	327, 60, 327, 327, 343, 345, 327, 349, 
	350, 351, 347, 353, 327, 357, 358, 367, 
	370, 359, 360, 361, 362, 363, 364, 365, 
	366, 328, 368, 369, 371, 373, 376, 374, 
	375, 378, 381, 379, 380, 382, 383, 385, 
	387, 386, 388, 390, 391, 327, 392, 393, 
	394, 395, 327, 397, 400, 398, 399, 401, 
	402, 404, 408, 409, 410, 412, 414, 413, 
	416, 417, 418, 420, 419, 421, 422, 424, 
	425, 426, 428, 430, 431, 432, 433, 435, 
	437, 438, 441, 440, 440, 442, 443, 445, 
	440, 440, 440, 444, 440, 444, 446, 440, 
	448, 447, 447, 451, 452, 453, 454, 447, 
	456, 457, 458, 459, 461, 463, 464, 465, 
	466, 467, 447, 449, 447, 450, 447, 447, 
	447, 447, 447, 455, 447, 455, 460, 447, 
	462, 447, 468, 468, 469, 484, 485, 471, 
	487, 488, 475, 489, 490, 491, 492, 493, 
	495, 496, 497, 498, 468, 468, 468, 468, 
	468, 468, 472, 477, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 486, 468, 486, 
	468, 468, 468, 468, 494, 468, 87, 91, 
	97, 499, 501, 504, 99, 499, 499, 500, 
	505, 505, 506, 507, 509, 511, 512, 505, 
	505, 508, 505, 508, 505, 510, 505, 505, 
	505, 514, 513, 513, 515, 516, 517, 519, 
	521, 522, 527, 534, 513, 513, 513, 513, 
	518, 513, 518, 513, 520, 513, 513, 514, 
	523, 524, 525, 526, 528, 529, 532, 530, 
	531, 533, 535, 536, 538, 537, 546, 547, 
	549, 550, 552, 554, 555, 556, 558, 559, 
	560, 562, 563, 584, 587, 588, 589, 657, 
	658, 659, 660, 661, 557, 663, 679, 684, 
	691, 696, 698, 704, 707, 708, 712, 706, 
	716, 727, 731, 734, 742, 746, 749, 750, 
	537, 103, 540, 537, 537, 542, 544, 545, 
	537, 543, 537, 537, 537, 537, 537, 104, 
	537, 537, 537, 537, 537, 551, 537, 551, 
	537, 537, 109, 537, 537, 110, 537, 537, 
	557, 537, 561, 537, 564, 573, 537, 111, 
	576, 577, 578, 537, 579, 113, 582, 114, 
	116, 583, 537, 565, 567, 537, 566, 537, 
	537, 568, 571, 572, 537, 569, 570, 537, 
	537, 537, 537, 580, 117, 586, 537, 537, 
	590, 537, 537, 537, 591, 593, 537, 592, 
	537, 592, 537, 594, 595, 596, 125, 131, 
	136, 619, 138, 537, 537, 537, 597, 598, 
	537, 126, 537, 537, 537, 127, 537, 537, 
	537, 130, 611, 613, 132, 537, 537, 133, 
	134, 537, 620, 624, 628, 621, 622, 623, 
	625, 626, 627, 537, 537, 629, 633, 639, 
	630, 637, 638, 631, 635, 636, 632, 634, 
	537, 640, 648, 653, 641, 642, 643, 644, 
	645, 646, 647, 649, 650, 651, 652, 537, 
	537, 537, 656, 140, 143, 537, 662, 537, 
	664, 665, 674, 677, 666, 667, 668, 669, 
	670, 671, 672, 673, 538, 675, 676, 678, 
	680, 683, 681, 682, 685, 688, 686, 687, 
	689, 690, 692, 694, 693, 695, 697, 699, 
	701, 700, 702, 703, 705, 538, 709, 710, 
	711, 713, 715, 714, 717, 718, 719, 724, 
	720, 721, 722, 537, 538, 539, 103, 723, 
	544, 725, 726, 728, 729, 730, 732, 733, 
	735, 736, 737, 740, 738, 739, 741, 743, 
	744, 745, 747, 748, 537, 751, 751, 752, 
	753, 754, 756, 751, 751, 751, 755, 751, 
	755, 751, 757, 751, 759, 758, 758, 760, 
	761, 758, 762, 764, 758, 758, 758, 758, 
	763, 758, 763, 765, 758, 767, 766, 766, 
	770, 771, 772, 766, 773, 775, 778, 779, 
	780, 781, 782, 766, 783, 784, 788, 811, 
	815, 766, 816, 818, 820, 766, 821, 822, 
	824, 828, 830, 831, 766, 833, 851, 856, 
	863, 871, 878, 885, 890, 891, 895, 889, 
	900, 910, 916, 919, 928, 932, 936, 937, 
	938, 768, 766, 769, 766, 766, 766, 766, 
	766, 766, 774, 766, 774, 766, 147, 777, 
	766, 766, 766, 766, 766, 766, 766, 785, 
	766, 766, 148, 150, 766, 151, 795, 803, 
	806, 790, 807, 808, 796, 800, 801, 766, 
	790, 151, 792, 793, 152, 766, 792, 766, 
	766, 794, 766, 797, 799, 766, 797, 798, 
	800, 801, 799, 766, 766, 802, 766, 766, 
	804, 799, 800, 801, 804, 805, 766, 797, 
	799, 800, 801, 766, 797, 799, 800, 801, 
	766, 809, 799, 800, 801, 809, 810, 766, 
	151, 811, 790, 812, 800, 801, 813, 799, 
	151, 813, 790, 814, 817, 819, 153, 154, 
	766, 766, 825, 826, 827, 822, 829, 766, 
	766, 832, 766, 766, 834, 835, 844, 849, 
	836, 837, 838, 839, 840, 841, 842, 843, 
	767, 845, 846, 847, 848, 767, 850, 852, 
	855, 853, 854, 767, 767, 857, 860, 858, 
	859, 861, 862, 767, 864, 866, 865, 867, 
	868, 869, 766, 766, 872, 767, 873, 766, 
	874, 875, 876, 877, 768, 879, 882, 880, 
	881, 883, 884, 886, 887, 888, 767, 892, 
	893, 894, 896, 898, 899, 897, 767, 901, 
	902, 903, 906, 904, 905, 907, 908, 909, 
	911, 913, 912, 914, 915, 917, 918, 920, 
	921, 923, 926, 922, 924, 925, 927, 929, 
	930, 931, 933, 934, 935, 766, 766, 939, 
	940, 941, 939, 943, 942, 944, 942, 945, 
	946, 947, 942, 942
};

static const short _lex_trans_actions[] = {
	447, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 435, 500, 67, 0, 53, 0, 
	0, 0, 65, 0, 49, 0, 866, 0, 
	49, 0, 0, 0, 0, 866, 49, 0, 
	866, 0, 49, 49, 0, 0, 0, 0, 
	0, 0, 0, 83, 0, 71, 0, 0, 
	0, 81, 0, 49, 0, 866, 0, 49, 
	0, 0, 0, 0, 866, 49, 0, 866, 
	0, 49, 49, 0, 0, 0, 0, 0, 
	0, 0, 111, 0, 101, 0, 0, 0, 
	131, 0, 119, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 185, 155, 
	183, 161, 199, 0, 0, 0, 189, 249, 
	0, 0, 223, 245, 878, 884, 1, 5, 
	5, 629, 1210, 5, 632, 1210, 647, 1210, 
	5, 5, 629, 5, 635, 5, 5, 1122, 
	5, 5, 5, 5, 5, 5, 0, 13, 
	1134, 0, 15, 1134, 227, 1134, 0, 0, 
	13, 0, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 884, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	247, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 259, 251, 257, 893, 0, 0, 
	0, 893, 1, 1126, 5, 5, 5, 1126, 
	339, 301, 335, 0, 0, 0, 0, 0, 
	331, 289, 0, 305, 337, 0, 293, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 19, 830, 0, 1, 0, 333, 0, 
	49, 0, 866, 0, 49, 0, 0, 0, 
	0, 866, 49, 0, 866, 0, 49, 49, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	911, 0, 0, 0, 0, 911, 361, 0, 
	0, 0, 349, 417, 369, 415, 0, 49, 
	49, 419, 950, 950, 0, 0, 0, 1, 
	0, 0, 0, 5, 626, 5, 5, 5, 
	7, 704, 1050, 704, 704, 704, 0, 9, 
	707, 9, 9, 9, 1130, 449, 365, 427, 
	0, 43, 863, 421, 437, 439, 0, 1, 
	0, 49, 0, 49, 441, 686, 1094, 7, 
	740, 0, 445, 0, 443, 433, 497, 0, 
	57, 55, 0, 452, 49, 49, 61, 63, 
	0, 0, 51, 59, 1038, 3, 3, 3, 
	3, 3, 3, 3, 3, 530, 611, 557, 
	0, 0, 539, 0, 1014, 548, 966, 0, 
	1165, 1002, 1150, 0, 49, 0, 0, 990, 
	978, 0, 1, 593, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 575, 1026, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 602, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 521, 584, 566, 
	0, 75, 73, 455, 49, 49, 79, 0, 
	0, 69, 77, 1042, 3, 3, 3, 3, 
	3, 3, 3, 3, 533, 614, 560, 0, 
	0, 542, 0, 1018, 551, 970, 0, 1170, 
	1006, 1155, 0, 49, 0, 0, 994, 982, 
	0, 1, 596, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 578, 1030, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 605, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 524, 587, 569, 0, 
	87, 85, 0, 458, 0, 89, 91, 620, 
	95, 93, 461, 0, 97, 623, 962, 105, 
	103, 464, 49, 109, 0, 0, 99, 107, 
	115, 113, 467, 123, 121, 0, 470, 49, 
	127, 129, 0, 0, 117, 125, 135, 133, 
	0, 473, 137, 139, 0, 141, 0, 0, 
	145, 149, 147, 875, 165, 163, 0, 1, 
	0, 0, 49, 49, 0, 0, 0, 157, 
	0, 0, 0, 0, 872, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 187, 153, 179, 638, 175, 
	1054, 7, 710, 0, 181, 0, 0, 0, 
	173, 0, 177, 159, 0, 0, 169, 0, 
	0, 0, 869, 0, 171, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 869, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 167, 0, 0, 
	0, 0, 151, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 49, 193, 191, 0, 0, 0, 
	197, 195, 1058, 7, 713, 0, 1, 641, 
	0, 205, 203, 0, 1, 0, 0, 201, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 209, 0, 743, 0, 755, 213, 
	644, 211, 1062, 7, 716, 0, 0, 215, 
	0, 207, 229, 231, 887, 1, 0, 884, 
	0, 0, 884, 0, 0, 0, 0, 0, 
	0, 49, 49, 49, 241, 239, 219, 482, 
	812, 235, 881, 0, 237, 221, 233, 225, 
	479, 803, 689, 653, 1066, 7, 719, 0, 
	815, 243, 217, 476, 1118, 650, 0, 0, 
	0, 253, 49, 49, 0, 255, 818, 890, 
	263, 265, 0, 0, 0, 0, 0, 267, 
	1070, 7, 722, 0, 269, 1, 656, 261, 
	692, 899, 273, 271, 0, 1, 0, 0, 
	0, 0, 0, 0, 281, 277, 662, 1074, 
	7, 725, 0, 279, 1, 659, 275, 896, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 914, 307, 0, 866, 
	0, 0, 49, 902, 0, 0, 0, 0, 
	0, 0, 49, 49, 0, 917, 0, 917, 
	917, 917, 0, 0, 917, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 0, 917, 
	749, 11, 0, 761, 770, 0, 911, 0, 
	776, 0, 794, 788, 782, 325, 665, 5, 
	327, 303, 488, 329, 1078, 7, 728, 0, 
	313, 287, 0, 311, 321, 0, 821, 309, 
	902, 283, 0, 285, 0, 0, 291, 0, 
	0, 0, 0, 299, 0, 0, 0, 0, 
	0, 0, 315, 0, 0, 746, 0, 758, 
	767, 0, 0, 0, 773, 0, 0, 791, 
	797, 785, 779, 0, 0, 0, 833, 317, 
	0, 297, 295, 485, 0, 49, 836, 21, 
	319, 0, 1046, 3, 3, 3, 3, 3, 
	3, 3, 3, 536, 617, 563, 0, 0, 
	545, 0, 1022, 554, 974, 0, 1175, 1010, 
	1160, 0, 49, 0, 0, 998, 986, 0, 
	1, 599, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 581, 1034, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	608, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 527, 
	590, 572, 0, 0, 0, 806, 1, 323, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 911, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 908, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 905, 839, 1142, 1138, 23, 23, 
	905, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 695, 341, 343, 0, 
	1, 0, 0, 345, 671, 1082, 7, 731, 
	0, 347, 1, 668, 49, 355, 353, 0, 
	1, 351, 0, 0, 359, 357, 677, 1086, 
	7, 734, 0, 1, 674, 956, 389, 387, 
	0, 1, 0, 367, 0, 49, 0, 0, 
	0, 0, 0, 381, 0, 0, 944, 944, 
	0, 383, 0, 0, 0, 379, 49, 953, 
	953, 953, 0, 0, 375, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 959, 752, 0, 764, 411, 683, 407, 
	373, 1090, 7, 737, 0, 413, 0, 0, 
	401, 377, 371, 824, 827, 363, 403, 0, 
	409, 397, 0, 0, 1205, 1102, 35, 0, 
	0, 1226, 0, 0, 35, 857, 857, 1114, 
	947, 0, 41, 41, 0, 1110, 39, 512, 
	515, 0, 518, 35, 35, 1106, 0, 0, 
	37, 37, 0, 506, 503, 0, 509, 1195, 
	31, 31, 851, 851, 0, 0, 1185, 27, 
	27, 845, 845, 1190, 29, 29, 848, 848, 
	1180, 25, 25, 842, 842, 0, 0, 1200, 
	1098, 1146, 1220, 33, 854, 854, 1146, 33, 
	860, 944, 1215, 0, 0, 0, 0, 0, 
	800, 399, 953, 953, 953, 941, 953, 809, 
	385, 1, 680, 405, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	938, 0, 0, 0, 0, 941, 0, 0, 
	0, 0, 0, 923, 929, 0, 0, 0, 
	0, 0, 0, 932, 0, 0, 0, 0, 
	0, 929, 395, 393, 0, 920, 0, 391, 
	0, 0, 0, 0, 935, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 926, 0, 
	0, 0, 0, 0, 0, 0, 935, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 698, 701, 423, 
	49, 43, 425, 0, 494, 0, 431, 0, 
	0, 0, 429, 491
};

static const short _lex_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 45, 0, 0, 
	0, 0, 0, 0, 0, 0, 45, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 45, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 45, 
	0, 0, 45, 0, 45, 0, 0, 0, 
	45, 45, 0, 0, 0, 0, 45, 0, 
	45, 0, 45, 0, 0, 0, 0, 45, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	45, 0, 0, 0, 0, 0, 0, 45, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 45, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 45, 0, 0, 0, 0, 
	0, 45, 0, 0, 0, 0, 0, 0, 
	0, 45, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 45, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 45, 
	0, 0, 0, 0, 0, 0, 45, 0, 
	0, 0, 0, 0, 0, 0, 45, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 45, 0, 0, 45, 0, 
	0, 0, 0, 0
};

static const short _lex_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 47, 0, 0, 
	0, 0, 0, 0, 0, 0, 47, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 47, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 47, 
	0, 0, 47, 0, 47, 0, 0, 0, 
	47, 47, 0, 0, 0, 0, 47, 0, 
	47, 0, 47, 0, 0, 0, 0, 47, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	47, 0, 0, 0, 0, 0, 0, 47, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 47, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 47, 0, 0, 0, 0, 
	0, 47, 0, 0, 0, 0, 0, 0, 
	0, 47, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 47, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 47, 
	0, 0, 0, 0, 0, 0, 47, 0, 
	0, 0, 0, 0, 0, 0, 47, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 47, 0, 0, 47, 0, 
	0, 0, 0, 0
};

static const short _lex_eof_trans[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 75, 
	75, 75, 75, 81, 81, 81, 81, 0, 
	0, 0, 0, 95, 97, 99, 99, 99, 
	104, 104, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 179, 181, 181, 181, 193, 
	195, 195, 195, 195, 195, 201, 193, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 193, 205, 205, 205, 205, 
	255, 255, 255, 260, 262, 262, 262, 266, 
	266, 260, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 296, 296, 0, 309, 310, 
	311, 313, 315, 317, 315, 315, 0, 327, 
	328, 332, 332, 333, 342, 343, 344, 344, 
	344, 347, 347, 349, 350, 351, 351, 351, 
	353, 354, 355, 355, 351, 347, 347, 360, 
	361, 361, 361, 361, 361, 364, 364, 364, 
	364, 364, 364, 364, 364, 374, 375, 375, 
	375, 375, 387, 387, 387, 375, 375, 375, 
	375, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 398, 387, 399, 400, 400, 0, 
	407, 411, 411, 412, 421, 422, 423, 423, 
	423, 426, 426, 428, 429, 430, 430, 430, 
	432, 433, 434, 434, 430, 426, 426, 439, 
	440, 440, 440, 440, 440, 443, 443, 443, 
	443, 443, 443, 443, 443, 453, 454, 454, 
	454, 454, 466, 466, 466, 454, 454, 454, 
	454, 466, 466, 466, 466, 466, 466, 466, 
	466, 466, 477, 466, 478, 479, 479, 0, 
	486, 487, 0, 493, 0, 500, 504, 504, 
	0, 0, 513, 514, 518, 518, 0, 523, 
	0, 526, 0, 529, 529, 530, 531, 0, 
	572, 574, 575, 576, 577, 579, 581, 585, 
	585, 576, 576, 576, 576, 587, 576, 576, 
	581, 576, 576, 572, 591, 591, 591, 591, 
	591, 591, 581, 581, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 630, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 576, 
	0, 673, 674, 675, 677, 673, 680, 0, 
	699, 701, 703, 704, 705, 706, 707, 709, 
	706, 706, 706, 706, 706, 712, 706, 706, 
	714, 712, 712, 706, 0, 733, 734, 104, 
	104, 737, 738, 104, 734, 734, 741, 743, 
	746, 734, 747, 734, 748, 749, 751, 753, 
	734, 741, 754, 754, 743, 754, 758, 754, 
	754, 754, 754, 0, 179, 766, 767, 766, 
	766, 0, 776, 777, 779, 781, 783, 781, 
	785, 0, 797, 798, 799, 800, 802, 804, 
	806, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 0, 193, 865, 868, 869, 873, 875, 
	876, 877, 878, 879, 881, 884, 885, 887, 
	889, 892, 893, 895, 896, 193, 893, 893, 
	884, 884, 884, 884, 915, 918, 920, 921, 
	925, 928, 929, 930, 931, 915, 915, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	884, 935, 884, 884, 884, 936, 943, 943, 
	945, 947, 956, 957, 958, 958, 958, 961, 
	961, 963, 964, 965, 965, 965, 967, 968, 
	969, 969, 965, 961, 961, 974, 975, 975, 
	975, 975, 975, 978, 978, 978, 978, 978, 
	978, 978, 978, 988, 989, 989, 989, 989, 
	1001, 1001, 1001, 989, 989, 989, 989, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1016, 1017, 1018, 
	1018, 193, 884, 884, 1022, 884, 879, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1076, 869, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1101, 884, 0, 
	1108, 1109, 1110, 1112, 1114, 1116, 0, 1125, 
	1126, 1127, 1128, 1130, 1125, 1133, 0, 266, 
	1187, 1189, 1190, 1191, 1192, 1194, 1196, 1198, 
	1201, 1201, 1192, 1192, 1204, 1205, 1192, 1192, 
	1207, 1209, 1210, 1210, 1213, 1224, 266, 1230, 
	1232, 1233, 1235, 1213, 1213, 1238, 1238, 1238, 
	1244, 1245, 1247, 1248, 1238, 1238, 1255, 1260, 
	1265, 1238, 1238, 1272, 1272, 1238, 1238, 1209, 
	1192, 1192, 1209, 1192, 1192, 1198, 266, 1289, 
	1290, 1290, 1290, 1290, 1290, 1290, 1296, 1198, 
	1299, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1339, 1340, 1300, 
	1300, 1344, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1398, 1192, 1399, 0, 1403, 1403, 0, 1407, 
	1407, 1407, 1407, 1411
};

static const int lex_start = 165;
static const int lex_error = 0;

static const int lex_en_interp_words = 174;
static const int lex_en_interp_string = 239;
static const int lex_en_plain_words = 303;
static const int lex_en_plain_string = 306;
static const int lex_en_interp_backslash_delimited = 308;
static const int lex_en_plain_backslash_delimited = 312;
static const int lex_en_interp_backslash_delimited_words = 313;
static const int lex_en_plain_backslash_delimited_words = 318;
static const int lex_en_regexp_modifiers = 320;
static const int lex_en_expr_variable = 322;
static const int lex_en_expr_fname = 327;
static const int lex_en_expr_endfn = 440;
static const int lex_en_expr_dot = 447;
static const int lex_en_expr_arg = 468;
static const int lex_en_expr_cmdarg = 499;
static const int lex_en_expr_endarg = 505;
static const int lex_en_expr_mid = 513;
static const int lex_en_expr_beg = 537;
static const int lex_en_expr_labelarg = 751;
static const int lex_en_expr_value = 758;
static const int lex_en_expr_end = 766;
static const int lex_en_leading_dot = 939;
static const int lex_en_line_comment = 942;
static const int lex_en_line_begin = 165;


#line 116 "cc/lexer.rl"

using namespace ruby_parser;
using namespace std::string_literals;


#line 121 "cc/lexer.rl"

lexer::lexer(diagnostics_t &diag, ruby_version version, const std::string& source_buffer_)
  : diagnostics(diag)
  , version(version)
  , source_buffer(source_buffer_ + std::string("\0\0", 2))
  , cs(lex_en_line_begin)
  , _p(source_buffer.data())
  , _pe(source_buffer.data() + source_buffer.size())
  , ts(nullptr)
  , te(nullptr)
  , act(0)
  , top(0)
  , eq_begin_s(nullptr)
  , sharp_s(nullptr)
  , newline_s(nullptr)
  , paren_nest(0)
  , command_state(false)
  , num_base(0)
  , num_digits_s(nullptr)
  , num_suffix_s(nullptr)
  , num_xfrm(num_xfrm_type::NONE)
  , escape_s(nullptr)
  , herebody_s(nullptr)
  , in_kwarg(false)
{
  // ensure the stack capacity is non-zero so we can just double in
  // check_stack_capacity:
  stack.reserve(16);

  static_env.push(environment());
}

void lexer::check_stack_capacity() {
  if (stack.size() == stack.capacity()) {
    stack.reserve(stack.capacity() * 2);
  }
}

int lexer::stack_pop() {
  return stack[--top];
}

int lexer::arg_or_cmdarg() {
  if (command_state) {
    return lex_en_expr_cmdarg;
  } else {
    return lex_en_expr_arg;
  }
}

void lexer::emit_comment(const char* s, const char* e) {
  /* unused for now */
  (void)s;
  (void)e;
}

std::string lexer::tok() {
  return tok(ts);
}

std::string lexer::tok(const char* start) {
  return tok(start, te);
}

std::string lexer::tok(const char* start, const char* end) {
  assert(start <= end);

  return std::string(start, (size_t)(end - start));
}

char lexer::unescape(uint32_t codepoint) {
    switch (codepoint) {
    case 'a': return '\a';
    case 'b': return '\b';
    case 'e': return 0x1b;
    case 'f': return '\f';
    case 'n': return '\n';
    case 'r': return '\r';
    case 's': return ' ';
    case 't': return '\t';
    case 'v': return '\v';
    case '\\': return '\\';
    default: return '\0';
    }
}

static const lexer::token_table PUNCTUATION = {
  { "=", token_type::tEQL },
  { "&", token_type::tAMPER2 },
  { "|", token_type::tPIPE },
  { "!", token_type::tBANG },
  { "^", token_type::tCARET },
  { "+", token_type::tPLUS },
  { "-", token_type::tMINUS },
  { "*", token_type::tSTAR2 },
  { "/", token_type::tDIVIDE },
  { "%", token_type::tPERCENT },
  { "~", token_type::tTILDE },
  { ",", token_type::tCOMMA },
  { ";", token_type::tSEMI },
  { ".", token_type::tDOT },
  { "..", token_type::tDOT2 },
  { "...", token_type::tDOT3 },
  { "[", token_type::tLBRACK2 },
  { "]", token_type::tRBRACK },
  { "(", token_type::tLPAREN2 },
  { ")", token_type::tRPAREN },
  { "?", token_type::tEH },
  { ":", token_type::tCOLON },
  { "&&", token_type::tANDOP },
  { "||", token_type::tOROP },
  { "-@", token_type::tUMINUS },
  { "+@", token_type::tUPLUS },
  { "~@", token_type::tTILDE },
  { "**", token_type::tPOW },
  { "->", token_type::tLAMBDA },
  { "=~", token_type::tMATCH },
  { "!~", token_type::tNMATCH },
  { "==", token_type::tEQ },
  { "!=", token_type::tNEQ },
  { ">", token_type::tGT },
  { ">>", token_type::tRSHFT },
  { ">=", token_type::tGEQ },
  { "<", token_type::tLT },
  { "<<", token_type::tLSHFT },
  { "<=", token_type::tLEQ },
  { "=>", token_type::tASSOC },
  { "::", token_type::tCOLON2 },
  { "===", token_type::tEQQ },
  { "<=>", token_type::tCMP },
  { "[]", token_type::tAREF },
  { "[]=", token_type::tASET },
  { "{", token_type::tLCURLY },
  { "}", token_type::tRCURLY },
  { "`", token_type::tBACK_REF2 },
  { "!@", token_type::tBANG },
  { "&.", token_type::tANDDOT },
};

static const lexer::token_table PUNCTUATION_BEGIN = {
  { "&", token_type::tAMPER },
  { "*", token_type::tSTAR },
  { "**", token_type::tDSTAR },
  { "+", token_type::tUPLUS },
  { "-", token_type::tUMINUS },
  { "::", token_type::tCOLON3 },
  { "(", token_type::tLPAREN },
  { "{", token_type::tLBRACE },
  { "[", token_type::tLBRACK },
};

static const lexer::token_table KEYWORDS = {
  { "if", token_type::kIF_MOD },
  { "unless", token_type::kUNLESS_MOD },
  { "while", token_type::kWHILE_MOD },
  { "until", token_type::kUNTIL_MOD },
  { "rescue", token_type::kRESCUE_MOD },
  { "defined?", token_type::kDEFINED },
  { "BEGIN", token_type::klBEGIN },
  { "END", token_type::klEND },
  { "class", token_type::kCLASS },
  { "module", token_type::kMODULE },
  { "def", token_type::kDEF },
  { "undef", token_type::kUNDEF },
  { "begin", token_type::kBEGIN },
  { "end", token_type::kEND },
  { "then", token_type::kTHEN },
  { "elsif", token_type::kELSIF },
  { "else", token_type::kELSE },
  { "ensure", token_type::kENSURE },
  { "case", token_type::kCASE },
  { "when", token_type::kWHEN },
  { "for", token_type::kFOR },
  { "break", token_type::kBREAK },
  { "next", token_type::kNEXT },
  { "redo", token_type::kREDO },
  { "retry", token_type::kRETRY },
  { "in", token_type::kIN },
  { "do", token_type::kDO },
  { "return", token_type::kRETURN },
  { "yield", token_type::kYIELD },
  { "super", token_type::kSUPER },
  { "self", token_type::kSELF },
  { "nil", token_type::kNIL },
  { "true", token_type::kTRUE },
  { "false", token_type::kFALSE },
  { "and", token_type::kAND },
  { "or", token_type::kOR },
  { "not", token_type::kNOT },
  { "alias", token_type::kALIAS },
  { "__FILE__", token_type::k__FILE__ },
  { "__LINE__", token_type::k__LINE__ },
  { "__ENCODING__", token_type::k__ENCODING__ },
};

static const lexer::token_table KEYWORDS_BEGIN = {
  { "if", token_type::kIF },
  { "unless", token_type::kUNLESS },
  { "while", token_type::kWHILE },
  { "until", token_type::kUNTIL },
  { "rescue", token_type::kRESCUE },
  { "defined?", token_type::kDEFINED },
  { "class", token_type::kCLASS },
  { "module", token_type::kMODULE },
  { "def", token_type::kDEF },
  { "undef", token_type::kUNDEF },
  { "begin", token_type::kBEGIN },
  { "end", token_type::kEND },
  { "then", token_type::kTHEN },
  { "elsif", token_type::kELSIF },
  { "else", token_type::kELSE },
  { "ensure", token_type::kENSURE },
  { "case", token_type::kCASE },
  { "when", token_type::kWHEN },
  { "for", token_type::kFOR },
  { "break", token_type::kBREAK },
  { "next", token_type::kNEXT },
  { "redo", token_type::kREDO },
  { "retry", token_type::kRETRY },
  { "in", token_type::kIN },
  { "do", token_type::kDO },
  { "return", token_type::kRETURN },
  { "yield", token_type::kYIELD },
  { "super", token_type::kSUPER },
  { "self", token_type::kSELF },
  { "nil", token_type::kNIL },
  { "true", token_type::kTRUE },
  { "false", token_type::kFALSE },
  { "and", token_type::kAND },
  { "or", token_type::kOR },
  { "not", token_type::kNOT },
  { "alias", token_type::kALIAS },
  { "__FILE__", token_type::k__FILE__ },
  { "__LINE__", token_type::k__LINE__ },
  { "__ENCODING__", token_type::k__ENCODING__ },
};

static size_t utf8_encode_char(int32_t uc, std::string &dst) {
  if (uc < 0x00) {
    return 0;
  } else if (uc < 0x80) {
    dst.push_back(static_cast<uint8_t>(uc));
    return 1;
  } else if (uc < 0x800) {
    dst.push_back(static_cast<uint8_t>(0xC0 + (uc >> 6)));
    dst.push_back(static_cast<uint8_t>(0x80 + (uc & 0x3F)));
    return 2;
  } else if (uc < 0x10000) {
    dst.push_back(static_cast<uint8_t>(0xE0 + (uc >> 12)));
    dst.push_back(static_cast<uint8_t>(0x80 + ((uc >> 6) & 0x3F)));
    dst.push_back(static_cast<uint8_t>(0x80 + (uc & 0x3F)));
    return 3;
  } else if (uc < 0x110000) {
    dst.push_back(static_cast<uint8_t>(0xF0 + (uc >> 18)));
    dst.push_back(static_cast<uint8_t>(0x80 + ((uc >> 12) & 0x3F)));
    dst.push_back(static_cast<uint8_t>(0x80 + ((uc >> 6) & 0x3F)));
    dst.push_back(static_cast<uint8_t>(0x80 + (uc & 0x3F)));
    return 4;
  } else return 0;
}

static bool split_codepoints(const std::string &str, std::string &output) {
  auto isspace = [](char c) { return c == ' ' || c == '\t'; };
  const char *ptr = str.c_str();

  while (*ptr) {
    while (isspace(*ptr))
      ptr++;

    const char *start = ptr;
    while (*ptr && !isspace(*ptr))
      ptr++;

    std::string cp {start, static_cast<size_t>(ptr - start)};
    if (utf8_encode_char(std::stoi(cp, nullptr, 16), output) == 0)
      return false;
  }
  return true;
}

static std::string gsub(const std::string&& str, const std::string&& search, const std::string&& replace) {
  std::string result;

  std::string::size_type from = 0;

  while (true) {
    auto index = str.find(search, from);

    if (index == std::string::npos) {
      result += str.substr(from);
      break;
    } else {
      result += str.substr(from, index - from);
      result += replace;
      from = index + search.size();
    }
  }

  return result;
}

static bool eof_codepoint(char c) {
  return c == 0 || c == 0x04 || c == 0x1a;
}

token_t lexer::advance_() {
  if (!token_queue.empty()) {
    token_t token = token_queue.front();
    token_queue.pop();
    return token;
  }

  command_state = (cs == lex_en_expr_value || cs == lex_en_line_begin);

  const char* p = _p;
  const char* pe = _pe;
  const char* eof = _pe;

  const char* tm = NULL;
  const char* heredoc_e = NULL;
  const char* new_herebody_s = NULL;

  
#line 3551 "cc/lexer.cc"
	{
	int _klen;
	unsigned int _trans;
	const short *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lex_actions + _lex_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 60:
#line 1 "NONE"
	{ts = p;}
	break;
#line 3572 "cc/lexer.cc"
		}
	}

	_keys = _lex_trans_keys + _lex_key_offsets[cs];
	_trans = _lex_index_offsets[cs];

	_klen = _lex_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lex_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _lex_indicies[_trans];
_eof_trans:
	cs = _lex_trans_targs[_trans];

	if ( _lex_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _lex_actions + _lex_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 615 "cc/lexer.rl"
	{
    // Record position of a newline for precise location reporting on tNL
    // tokens.
    //
    // This action is embedded directly into c_nl, as it is idempotent and
    // there are no cases when we need to skip it.
    newline_s = p;
  }
	break;
	case 1:
#line 748 "cc/lexer.rl"
	{ num_xfrm = num_xfrm_type::NONE; }
	break;
	case 2:
#line 749 "cc/lexer.rl"
	{ num_xfrm = num_xfrm_type::RATIONAL; }
	break;
	case 3:
#line 750 "cc/lexer.rl"
	{ num_xfrm = num_xfrm_type::IMAGINARY; }
	break;
	case 4:
#line 751 "cc/lexer.rl"
	{ num_xfrm = num_xfrm_type::RATIONAL_IMAGINARY; }
	break;
	case 5:
#line 754 "cc/lexer.rl"
	{ num_xfrm = num_xfrm_type::FLOAT; }
	break;
	case 6:
#line 755 "cc/lexer.rl"
	{ num_xfrm = num_xfrm_type::FLOAT_IMAGINARY; }
	break;
	case 7:
#line 759 "cc/lexer.rl"
	{ num_xfrm = num_xfrm_type::RATIONAL; }
	break;
	case 8:
#line 760 "cc/lexer.rl"
	{ num_xfrm = num_xfrm_type::RATIONAL_IMAGINARY; }
	break;
	case 9:
#line 775 "cc/lexer.rl"
	{
    auto codepoint_str = tok(escape_s + 2, p - 1);
    std::string result;

    if (split_codepoints(codepoint_str, result)) {
      escape = std::make_unique<std::string>(result);
    } else {
      auto codepoint_s = escape_s + 2;
      diagnostic_(dlevel::ERROR, dclass::UnicodePointTooLarge,
        range(codepoint_s, codepoint_s + codepoint_str.size()));
    }
  }
	break;
	case 10:
#line 788 "cc/lexer.rl"
	{
    char esc = unescape(p[-1]);
    if (esc) {
      escape = std::make_unique<std::string>(&esc, 1);
    } else {
      escape = std::make_unique<std::string>(p - 1, 1);
    }
  }
	break;
	case 11:
#line 797 "cc/lexer.rl"
	{
    diagnostic_(dlevel::FATAL, dclass::InvalidEscape);
  }
	break;
	case 12:
#line 801 "cc/lexer.rl"
	{
    // TODO multibyte
    char c = escape->at(0) & 0x9f;
    escape = std::make_unique<std::string>(&c, 1);
  }
	break;
	case 13:
#line 807 "cc/lexer.rl"
	{
    // TODO multibyte
    char c = escape->at(0) | 0x80;
    escape = std::make_unique<std::string>(&c, 1);
  }
	break;
	case 14:
#line 815 "cc/lexer.rl"
	{ escape = std::make_unique<std::string>(p - 1, 1); /* TODO multibyte */ }
	break;
	case 15:
#line 820 "cc/lexer.rl"
	{ escape = std::make_unique<std::string>("\x7f"); }
	break;
	case 16:
#line 821 "cc/lexer.rl"
	{ escape = std::make_unique<std::string>(p - 1, 1); /* TODO multibyte */ }
	break;
	case 17:
#line 827 "cc/lexer.rl"
	{
	auto esc = tok(escape_s, p);
	char c = std::stoi(esc, nullptr, 8);
	escape = std::make_unique<std::string>(&c, 1);
      }
	break;
	case 18:
#line 834 "cc/lexer.rl"
	{
	  auto esc = tok(escape_s + 1, p);
	  char c = std::stoi(esc, nullptr, 16);
	  escape = std::make_unique<std::string>(&c, 1);
      }
	break;
	case 19:
#line 841 "cc/lexer.rl"
	{
	std::string result;
	split_codepoints(tok(escape_s + 1, p), result);
	escape = std::make_unique<std::string>(result);
      }
	break;
	case 20:
#line 848 "cc/lexer.rl"
	{
        diagnostic_(dlevel::FATAL, dclass::InvalidHexEscape, range(escape_s - 1, p + 2));
      }
	break;
	case 21:
#line 860 "cc/lexer.rl"
	{
        diagnostic_(dlevel::FATAL, dclass::InvalidUnicodeEscape, range(escape_s - 1, p));
      }
	break;
	case 22:
#line 871 "cc/lexer.rl"
	{
          diagnostic_(dlevel::FATAL, dclass::UnterminatedUnicode, range(p - 1, p));
        }
	break;
	case 23:
#line 897 "cc/lexer.rl"
	{
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(p - 1, p));
    }
	break;
	case 24:
#line 903 "cc/lexer.rl"
	{
    escape_s = p;
    escape   = nullptr;
  }
	break;
	case 25:
#line 943 "cc/lexer.rl"
	{
    // After every heredoc was parsed, herebody_s contains the
    // position of next token after all heredocs.
    if (herebody_s) {
      p = herebody_s;
      herebody_s = NULL;
    }
  }
	break;
	case 26:
#line 1153 "cc/lexer.rl"
	{
    cond.push(false); cmdarg.push(false);

    if (!literal_stack.empty()) {
      literal_().start_interp_brace();
    }
  }
	break;
	case 27:
#line 1161 "cc/lexer.rl"
	{
    if (!literal_stack.empty()) {
      auto& current_literal = literal_();

      if (current_literal.end_interp_brace_and_try_closing()) {
        if (version == ruby_version::RUBY_18 || version == ruby_version::RUBY_19) {
          emit(token_type::tRCURLY, "}", p - 1, p);
        } else {
          emit(token_type::tSTRING_DEND, "}", p - 1, p);
        }

        if (current_literal.saved_herebody_s) {
          herebody_s = current_literal.saved_herebody_s;
        }

        p--;
        cs = (stack_pop());
        {p++; goto _out; }
      }
    }
  }
	break;
	case 28:
#line 1316 "cc/lexer.rl"
	{ sharp_s = p - 1; }
	break;
	case 29:
#line 1319 "cc/lexer.rl"
	{ emit_comment(sharp_s, p == pe ? p - 2 : p); }
	break;
	case 30:
#line 1360 "cc/lexer.rl"
	{ tm = p; }
	break;
	case 31:
#line 1361 "cc/lexer.rl"
	{ tm = p - 2; }
	break;
	case 32:
#line 1366 "cc/lexer.rl"
	{ tm = p; }
	break;
	case 33:
#line 1367 "cc/lexer.rl"
	{ tm = p - 2; }
	break;
	case 34:
#line 1368 "cc/lexer.rl"
	{ tm = p - 2; }
	break;
	case 35:
#line 1369 "cc/lexer.rl"
	{ tm = p - 2; }
	break;
	case 36:
#line 1370 "cc/lexer.rl"
	{ tm = p - 3; }
	break;
	case 37:
#line 1375 "cc/lexer.rl"
	{ tm = p - 2; }
	break;
	case 38:
#line 1380 "cc/lexer.rl"
	{ tm = p - 2; }
	break;
	case 39:
#line 1386 "cc/lexer.rl"
	{
    cond.push(false); cmdarg.push(false);
  }
	break;
	case 40:
#line 1393 "cc/lexer.rl"
	{
    cond.push(false); cmdarg.push(false);

    paren_nest += 1;
  }
	break;
	case 41:
#line 1399 "cc/lexer.rl"
	{
    paren_nest -= 1;
  }
	break;
	case 42:
#line 1630 "cc/lexer.rl"
	{ tm = p; }
	break;
	case 43:
#line 1646 "cc/lexer.rl"
	{ tm = p; }
	break;
	case 44:
#line 1673 "cc/lexer.rl"
	{ tm = p; }
	break;
	case 45:
#line 1893 "cc/lexer.rl"
	{ heredoc_e      = p; }
	break;
	case 46:
#line 1894 "cc/lexer.rl"
	{ new_herebody_s = p; }
	break;
	case 47:
#line 1991 "cc/lexer.rl"
	{ escape = nullptr; }
	break;
	case 48:
#line 2066 "cc/lexer.rl"
	{ tm = p; }
	break;
	case 49:
#line 2297 "cc/lexer.rl"
	{ num_base = 16; num_digits_s = p; }
	break;
	case 50:
#line 2298 "cc/lexer.rl"
	{ num_base = 10; num_digits_s = p; }
	break;
	case 51:
#line 2299 "cc/lexer.rl"
	{ num_base = 8;  num_digits_s = p; }
	break;
	case 52:
#line 2300 "cc/lexer.rl"
	{ num_base = 2;  num_digits_s = p; }
	break;
	case 53:
#line 2301 "cc/lexer.rl"
	{ num_base = 10; num_digits_s = ts; }
	break;
	case 54:
#line 2302 "cc/lexer.rl"
	{ num_base = 8;  num_digits_s = ts; }
	break;
	case 55:
#line 2303 "cc/lexer.rl"
	{ num_suffix_s = p; }
	break;
	case 56:
#line 2357 "cc/lexer.rl"
	{ num_suffix_s = p; }
	break;
	case 57:
#line 2358 "cc/lexer.rl"
	{ num_suffix_s = p; }
	break;
	case 58:
#line 2503 "cc/lexer.rl"
	{ tm = p; }
	break;
	case 61:
#line 1 "NONE"
	{te = p+1;}
	break;
	case 62:
#line 1183 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DBEG, "#{");

    if (current_literal.heredoc()) {
      current_literal.saved_herebody_s = herebody_s;
      herebody_s = nullptr;
    }

    current_literal.start_interp_brace();
    { check_stack_capacity(); {stack[top++] = cs; cs = 758; goto _again;}}
  }}
	break;
	case 63:
#line 1128 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DVAR, "", ts, ts + 1);

    p = ts;
    { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}}
  }}
	break;
	case 64:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 65:
#line 952 "cc/lexer.rl"
	{te = p+1;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 66:
#line 1128 "cc/lexer.rl"
	{te = p;p--;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DVAR, "", ts, ts + 1);

    p = ts;
    { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}}
  }}
	break;
	case 67:
#line 984 "cc/lexer.rl"
	{te = p;p--;{
    auto& current_literal = literal_();

    // TODO multibyte
    auto escaped_char = *escape_s;

    if (current_literal.munge_escape(escaped_char)) {
      // If this particular literal uses this character as an opening
      // or closing delimiter, it is an escape sequence for that
      // particular character. Write it without the backslash.

      if (current_literal.regexp()
          && (escaped_char == '\\' ||
              escaped_char == '$'  ||
              escaped_char == '$'  ||
              escaped_char == '('  ||
              escaped_char == ')'  ||
              escaped_char == '*'  ||
              escaped_char == '+'  ||
              escaped_char == '.'  ||
              escaped_char == '<'  ||
              escaped_char == '>'  ||
              escaped_char == '?'  ||
              escaped_char == '['  ||
              escaped_char == ']'  ||
              escaped_char == '^'  ||
              escaped_char == '{'  ||
              escaped_char == '|'  ||
              escaped_char == '}')) {
        // Regular expressions should include escaped delimiters in their
        // escaped form, except when the escaped character is
        // a closing delimiter but not a regexp metacharacter.
        //
        // The backslash itself cannot be used as a closing delimiter
        // at the same time as an escape symbol, but it is always munged,
        // so this branch also executes for the non-closing-delimiter case
        // for the backslash.
        auto str = tok();
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = std::string(&escaped_char, 1);
        current_literal.extend_string(str, ts, te);
      }
    } else {
      // It does not. So this is an actual escape sequence, yay!
      if (current_literal.regexp()) {
        // Regular expressions should include escape sequences in their
        // escaped form. On the other hand, escaped newlines are removed.
        std::string str = gsub(tok(), "\\\n", "");
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = escape ? *escape : tok();
        current_literal.extend_string(str, ts, te);
      }
    }
  }}
	break;
	case 68:
#line 1115 "cc/lexer.rl"
	{te = p;p--;{
    literal_().extend_space(ts, te);
  }}
	break;
	case 69:
#line 952 "cc/lexer.rl"
	{te = p;p--;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 70:
#line 984 "cc/lexer.rl"
	{{p = ((te))-1;}{
    auto& current_literal = literal_();

    // TODO multibyte
    auto escaped_char = *escape_s;

    if (current_literal.munge_escape(escaped_char)) {
      // If this particular literal uses this character as an opening
      // or closing delimiter, it is an escape sequence for that
      // particular character. Write it without the backslash.

      if (current_literal.regexp()
          && (escaped_char == '\\' ||
              escaped_char == '$'  ||
              escaped_char == '$'  ||
              escaped_char == '('  ||
              escaped_char == ')'  ||
              escaped_char == '*'  ||
              escaped_char == '+'  ||
              escaped_char == '.'  ||
              escaped_char == '<'  ||
              escaped_char == '>'  ||
              escaped_char == '?'  ||
              escaped_char == '['  ||
              escaped_char == ']'  ||
              escaped_char == '^'  ||
              escaped_char == '{'  ||
              escaped_char == '|'  ||
              escaped_char == '}')) {
        // Regular expressions should include escaped delimiters in their
        // escaped form, except when the escaped character is
        // a closing delimiter but not a regexp metacharacter.
        //
        // The backslash itself cannot be used as a closing delimiter
        // at the same time as an escape symbol, but it is always munged,
        // so this branch also executes for the non-closing-delimiter case
        // for the backslash.
        auto str = tok();
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = std::string(&escaped_char, 1);
        current_literal.extend_string(str, ts, te);
      }
    } else {
      // It does not. So this is an actual escape sequence, yay!
      if (current_literal.regexp()) {
        // Regular expressions should include escape sequences in their
        // escaped form. On the other hand, escaped newlines are removed.
        std::string str = gsub(tok(), "\\\n", "");
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = escape ? *escape : tok();
        current_literal.extend_string(str, ts, te);
      }
    }
  }}
	break;
	case 71:
#line 952 "cc/lexer.rl"
	{{p = ((te))-1;}{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 72:
#line 1183 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DBEG, "#{");

    if (current_literal.heredoc()) {
      current_literal.saved_herebody_s = herebody_s;
      herebody_s = nullptr;
    }

    current_literal.start_interp_brace();
    { check_stack_capacity(); {stack[top++] = cs; cs = 758; goto _again;}}
  }}
	break;
	case 73:
#line 1128 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DVAR, "", ts, ts + 1);

    p = ts;
    { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}}
  }}
	break;
	case 74:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 75:
#line 952 "cc/lexer.rl"
	{te = p+1;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 76:
#line 1128 "cc/lexer.rl"
	{te = p;p--;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DVAR, "", ts, ts + 1);

    p = ts;
    { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}}
  }}
	break;
	case 77:
#line 984 "cc/lexer.rl"
	{te = p;p--;{
    auto& current_literal = literal_();

    // TODO multibyte
    auto escaped_char = *escape_s;

    if (current_literal.munge_escape(escaped_char)) {
      // If this particular literal uses this character as an opening
      // or closing delimiter, it is an escape sequence for that
      // particular character. Write it without the backslash.

      if (current_literal.regexp()
          && (escaped_char == '\\' ||
              escaped_char == '$'  ||
              escaped_char == '$'  ||
              escaped_char == '('  ||
              escaped_char == ')'  ||
              escaped_char == '*'  ||
              escaped_char == '+'  ||
              escaped_char == '.'  ||
              escaped_char == '<'  ||
              escaped_char == '>'  ||
              escaped_char == '?'  ||
              escaped_char == '['  ||
              escaped_char == ']'  ||
              escaped_char == '^'  ||
              escaped_char == '{'  ||
              escaped_char == '|'  ||
              escaped_char == '}')) {
        // Regular expressions should include escaped delimiters in their
        // escaped form, except when the escaped character is
        // a closing delimiter but not a regexp metacharacter.
        //
        // The backslash itself cannot be used as a closing delimiter
        // at the same time as an escape symbol, but it is always munged,
        // so this branch also executes for the non-closing-delimiter case
        // for the backslash.
        auto str = tok();
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = std::string(&escaped_char, 1);
        current_literal.extend_string(str, ts, te);
      }
    } else {
      // It does not. So this is an actual escape sequence, yay!
      if (current_literal.regexp()) {
        // Regular expressions should include escape sequences in their
        // escaped form. On the other hand, escaped newlines are removed.
        std::string str = gsub(tok(), "\\\n", "");
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = escape ? *escape : tok();
        current_literal.extend_string(str, ts, te);
      }
    }
  }}
	break;
	case 78:
#line 952 "cc/lexer.rl"
	{te = p;p--;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 79:
#line 984 "cc/lexer.rl"
	{{p = ((te))-1;}{
    auto& current_literal = literal_();

    // TODO multibyte
    auto escaped_char = *escape_s;

    if (current_literal.munge_escape(escaped_char)) {
      // If this particular literal uses this character as an opening
      // or closing delimiter, it is an escape sequence for that
      // particular character. Write it without the backslash.

      if (current_literal.regexp()
          && (escaped_char == '\\' ||
              escaped_char == '$'  ||
              escaped_char == '$'  ||
              escaped_char == '('  ||
              escaped_char == ')'  ||
              escaped_char == '*'  ||
              escaped_char == '+'  ||
              escaped_char == '.'  ||
              escaped_char == '<'  ||
              escaped_char == '>'  ||
              escaped_char == '?'  ||
              escaped_char == '['  ||
              escaped_char == ']'  ||
              escaped_char == '^'  ||
              escaped_char == '{'  ||
              escaped_char == '|'  ||
              escaped_char == '}')) {
        // Regular expressions should include escaped delimiters in their
        // escaped form, except when the escaped character is
        // a closing delimiter but not a regexp metacharacter.
        //
        // The backslash itself cannot be used as a closing delimiter
        // at the same time as an escape symbol, but it is always munged,
        // so this branch also executes for the non-closing-delimiter case
        // for the backslash.
        auto str = tok();
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = std::string(&escaped_char, 1);
        current_literal.extend_string(str, ts, te);
      }
    } else {
      // It does not. So this is an actual escape sequence, yay!
      if (current_literal.regexp()) {
        // Regular expressions should include escape sequences in their
        // escaped form. On the other hand, escaped newlines are removed.
        std::string str = gsub(tok(), "\\\n", "");
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = escape ? *escape : tok();
        current_literal.extend_string(str, ts, te);
      }
    }
  }}
	break;
	case 80:
#line 952 "cc/lexer.rl"
	{{p = ((te))-1;}{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 81:
#line 984 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    // TODO multibyte
    auto escaped_char = *escape_s;

    if (current_literal.munge_escape(escaped_char)) {
      // If this particular literal uses this character as an opening
      // or closing delimiter, it is an escape sequence for that
      // particular character. Write it without the backslash.

      if (current_literal.regexp()
          && (escaped_char == '\\' ||
              escaped_char == '$'  ||
              escaped_char == '$'  ||
              escaped_char == '('  ||
              escaped_char == ')'  ||
              escaped_char == '*'  ||
              escaped_char == '+'  ||
              escaped_char == '.'  ||
              escaped_char == '<'  ||
              escaped_char == '>'  ||
              escaped_char == '?'  ||
              escaped_char == '['  ||
              escaped_char == ']'  ||
              escaped_char == '^'  ||
              escaped_char == '{'  ||
              escaped_char == '|'  ||
              escaped_char == '}')) {
        // Regular expressions should include escaped delimiters in their
        // escaped form, except when the escaped character is
        // a closing delimiter but not a regexp metacharacter.
        //
        // The backslash itself cannot be used as a closing delimiter
        // at the same time as an escape symbol, but it is always munged,
        // so this branch also executes for the non-closing-delimiter case
        // for the backslash.
        auto str = tok();
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = std::string(&escaped_char, 1);
        current_literal.extend_string(str, ts, te);
      }
    } else {
      // It does not. So this is an actual escape sequence, yay!
      if (current_literal.regexp()) {
        // Regular expressions should include escape sequences in their
        // escaped form. On the other hand, escaped newlines are removed.
        std::string str = gsub(tok(), "\\\n", "");
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = escape ? *escape : tok();
        current_literal.extend_string(str, ts, te);
      }
    }
  }}
	break;
	case 82:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 83:
#line 952 "cc/lexer.rl"
	{te = p+1;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 84:
#line 1115 "cc/lexer.rl"
	{te = p;p--;{
    literal_().extend_space(ts, te);
  }}
	break;
	case 85:
#line 952 "cc/lexer.rl"
	{te = p;p--;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 86:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 87:
#line 984 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    // TODO multibyte
    auto escaped_char = *escape_s;

    if (current_literal.munge_escape(escaped_char)) {
      // If this particular literal uses this character as an opening
      // or closing delimiter, it is an escape sequence for that
      // particular character. Write it without the backslash.

      if (current_literal.regexp()
          && (escaped_char == '\\' ||
              escaped_char == '$'  ||
              escaped_char == '$'  ||
              escaped_char == '('  ||
              escaped_char == ')'  ||
              escaped_char == '*'  ||
              escaped_char == '+'  ||
              escaped_char == '.'  ||
              escaped_char == '<'  ||
              escaped_char == '>'  ||
              escaped_char == '?'  ||
              escaped_char == '['  ||
              escaped_char == ']'  ||
              escaped_char == '^'  ||
              escaped_char == '{'  ||
              escaped_char == '|'  ||
              escaped_char == '}')) {
        // Regular expressions should include escaped delimiters in their
        // escaped form, except when the escaped character is
        // a closing delimiter but not a regexp metacharacter.
        //
        // The backslash itself cannot be used as a closing delimiter
        // at the same time as an escape symbol, but it is always munged,
        // so this branch also executes for the non-closing-delimiter case
        // for the backslash.
        auto str = tok();
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = std::string(&escaped_char, 1);
        current_literal.extend_string(str, ts, te);
      }
    } else {
      // It does not. So this is an actual escape sequence, yay!
      if (current_literal.regexp()) {
        // Regular expressions should include escape sequences in their
        // escaped form. On the other hand, escaped newlines are removed.
        std::string str = gsub(tok(), "\\\n", "");
        current_literal.extend_string(str, ts, te);
      } else {
        auto str = escape ? *escape : tok();
        current_literal.extend_string(str, ts, te);
      }
    }
  }}
	break;
	case 88:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 89:
#line 952 "cc/lexer.rl"
	{te = p+1;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 90:
#line 952 "cc/lexer.rl"
	{te = p;p--;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 91:
#line 1183 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DBEG, "#{");

    if (current_literal.heredoc()) {
      current_literal.saved_herebody_s = herebody_s;
      herebody_s = nullptr;
    }

    current_literal.start_interp_brace();
    { check_stack_capacity(); {stack[top++] = cs; cs = 758; goto _again;}}
  }}
	break;
	case 92:
#line 1128 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DVAR, "", ts, ts + 1);

    p = ts;
    { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}}
  }}
	break;
	case 93:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 94:
#line 952 "cc/lexer.rl"
	{te = p+1;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 95:
#line 1128 "cc/lexer.rl"
	{te = p;p--;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DVAR, "", ts, ts + 1);

    p = ts;
    { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}}
  }}
	break;
	case 96:
#line 952 "cc/lexer.rl"
	{te = p;p--;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 97:
#line 952 "cc/lexer.rl"
	{{p = ((te))-1;}{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 98:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 99:
#line 952 "cc/lexer.rl"
	{te = p+1;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 100:
#line 1183 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DBEG, "#{");

    if (current_literal.heredoc()) {
      current_literal.saved_herebody_s = herebody_s;
      herebody_s = nullptr;
    }

    current_literal.start_interp_brace();
    { check_stack_capacity(); {stack[top++] = cs; cs = 758; goto _again;}}
  }}
	break;
	case 101:
#line 1128 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DVAR, "", ts, ts + 1);

    p = ts;
    { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}}
  }}
	break;
	case 102:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 103:
#line 952 "cc/lexer.rl"
	{te = p+1;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 104:
#line 1128 "cc/lexer.rl"
	{te = p;p--;{
    auto& current_literal = literal_();
    current_literal.flush_string();
    current_literal.extend_content();

    emit(token_type::tSTRING_DVAR, "", ts, ts + 1);

    p = ts;
    { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}}
  }}
	break;
	case 105:
#line 1115 "cc/lexer.rl"
	{te = p;p--;{
    literal_().extend_space(ts, te);
  }}
	break;
	case 106:
#line 952 "cc/lexer.rl"
	{te = p;p--;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 107:
#line 952 "cc/lexer.rl"
	{{p = ((te))-1;}{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 108:
#line 1044 "cc/lexer.rl"
	{te = p+1;{
    auto& current_literal = literal_();

    if (te == pe) {
      diagnostic_(dlevel::FATAL, dclass::EscapeEof, range(current_literal.str_s, current_literal.str_s + 1));
    }

    if (current_literal.heredoc()) {
      auto line = tok(herebody_s, ts);

      while (line.back() == '\r') {
        line.pop_back();
      }

      if (version <= ruby_version::RUBY_20) {
        // See ruby:c48b4209c
        auto riter = line.rfind('\r');

        if (riter != std::string::npos) {
          line.erase(riter);
        }
      }

      // Try ending the heredoc with the complete most recently
      // scanned line. @herebody_s always refers to the start of such line.
      if (current_literal.nest_and_try_closing(line, herebody_s, ts)) {
        herebody_s = te;

        // Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1;
        cs = (pop_literal()); {p++; goto _out; }
      } else {
        // Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line);

        // Ditto.
        herebody_s = te;
      }
    } else {
      // Try ending the literal with a newline.
      auto str = tok();
      if (current_literal.nest_and_try_closing(str, ts, te)) {
        cs = (pop_literal()); {p++; goto _out; }
      }

      if (herebody_s) {
        // This is a regular literal intertwined with a heredoc. Like:
        //
        //     p <<-foo+"1
        //     bar
        //     foo
        //     2"
        //
        // which, incidentally, evaluates to "bar\n1\n2".
        p = herebody_s - 1;
        herebody_s = nullptr;
      }
    }

    if (current_literal.words() && !eof_codepoint(*p)) {
      current_literal.extend_space(ts, te);
    } else {
      // A literal newline is appended if the heredoc was _not_ closed
      // this time (see f break above). See also Literal#nest_and_try_closing
      // for rationale of calling #flush_string here.
      std::string str = tok();
      current_literal.extend_string(str, ts, te);
      current_literal.flush_string();
    }
  }}
	break;
	case 109:
#line 952 "cc/lexer.rl"
	{te = p+1;{
    auto str = tok();
    std::string lookahead;

    // tLABEL_END is only possible in non-cond context on >= 2.2
    if (version >= ruby_version::RUBY_22 && !cond.active()) {
      const char* lookahead_s = te;
      const char* lookahead_e = te + 2;

      if (lookahead_e > eof) {
        lookahead_e = eof;
      }

      lookahead = std::string(lookahead_s, (size_t)(lookahead_e - lookahead_s));
    }

    auto& current_literal = literal_();

    if (!current_literal.heredoc() && current_literal.nest_and_try_closing(str, ts, te, lookahead)) {
      if (token_queue.back()->type() == token_type::tLABEL_END) {
        p += 1;
        pop_literal();
        cs = 751;
      } else {
        cs = (pop_literal());
      }
      {p++; goto _out; }
    } else {
      current_literal.extend_string(str, ts, te);
    }
  }}
	break;
	case 110:
#line 1115 "cc/lexer.rl"
	{te = p;p--;{
    literal_().extend_space(ts, te);
  }}
	break;
	case 111:
#line 1291 "cc/lexer.rl"
	{te = p+1;{
        emit(token_type::tREGEXP_OPT, tok(ts, te - 1), ts, te - 1);
        p--; {cs = 766; goto _again;}
      }}
	break;
	case 112:
#line 1261 "cc/lexer.rl"
	{te = p;p--;{
        auto options = tok();
        std::string unknown_options;

        for (auto i = options.cbegin(); i != options.cend(); ++i) {
          switch (char opt = *i) {
            case 'i':
            case 'm':
            case 'x':
            case 'o':
            case 'u':
            case 'e':
            case 's':
            case 'n':
              continue;
            default:
              unknown_options += opt;
              break;
          }
        }

        if (!unknown_options.empty()) {
          diagnostic_(dlevel::ERROR, dclass::RegexpOptions, unknown_options);
        }

        emit(token_type::tREGEXP_OPT, options);
        cs = 766; {p++; goto _out; }
      }}
	break;
	case 113:
#line 1421 "cc/lexer.rl"
	{te = p+1;{
        if (ts[1] >= '1' && ts[1] <= '9') {
          emit(token_type::tNTH_REF, tok(ts + 1));
        } else if (ts[1] == '&' || ts[1] == '`' || ts[1] == '\'' || ts[1] == '+') {
          emit(token_type::tBACK_REF);
        } else {
          emit(token_type::tGVAR);
        }

        cs = (stack_pop()); {p++; goto _out; }
      }}
	break;
	case 114:
#line 1421 "cc/lexer.rl"
	{te = p;p--;{
        if (ts[1] >= '1' && ts[1] <= '9') {
          emit(token_type::tNTH_REF, tok(ts + 1));
        } else if (ts[1] == '&' || ts[1] == '`' || ts[1] == '\'' || ts[1] == '+') {
          emit(token_type::tBACK_REF);
        } else {
          emit(token_type::tGVAR);
        }

        cs = (stack_pop()); {p++; goto _out; }
      }}
	break;
	case 115:
#line 1434 "cc/lexer.rl"
	{te = p;p--;{
        if (ts[2] >= '0' && ts[2] <= '9') {
          diagnostic_(dlevel::ERROR, dclass::CvarName, ts);
        }

        emit(token_type::tCVAR);
        cs = (stack_pop()); {p++; goto _out; }
      }}
	break;
	case 116:
#line 1444 "cc/lexer.rl"
	{te = p;p--;{
        if (ts[1] >= '0' && ts[1] <= '9') {
          diagnostic_(dlevel::ERROR, dclass::IvarName, ts);
        }

        emit(token_type::tIVAR);
        cs = (stack_pop()); {p++; goto _out; }
      }}
	break;
	case 117:
#line 1465 "cc/lexer.rl"
	{act = 39;}
	break;
	case 118:
#line 1469 "cc/lexer.rl"
	{act = 40;}
	break;
	case 119:
#line 1473 "cc/lexer.rl"
	{act = 41;}
	break;
	case 120:
#line 1465 "cc/lexer.rl"
	{te = p+1;{ emit_table(KEYWORDS_BEGIN);
           cs = 440; {p++; goto _out; } }}
	break;
	case 121:
#line 1473 "cc/lexer.rl"
	{te = p+1;{ emit(token_type::tIDENTIFIER);
           cs = 440; {p++; goto _out; } }}
	break;
	case 122:
#line 1477 "cc/lexer.rl"
	{te = p+1;{ p = ts - 1;
           cs = 766; { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}} }}
	break;
	case 123:
#line 1486 "cc/lexer.rl"
	{te = p+1;{ emit_table(PUNCTUATION);
           cs = 440; {p++; goto _out; } }}
	break;
	case 124:
#line 1490 "cc/lexer.rl"
	{te = p+1;{ p--; p--; {cs = 766; goto _again;} }}
	break;
	case 125:
#line 1496 "cc/lexer.rl"
	{te = p+1;{
        if (version == ruby_version::RUBY_23) {
          {cs = (push_literal(literal_type::LOWERS_SYMBOL, std::string(ts + 2, 1), ts)); goto _again;}
        } else {
          p = ts - 1;
          {cs = 766; goto _again;}
        }
      }}
	break;
	case 126:
#line 1508 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 766; goto _again;} }}
	break;
	case 127:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 128:
#line 1465 "cc/lexer.rl"
	{te = p;p--;{ emit_table(KEYWORDS_BEGIN);
           cs = 440; {p++; goto _out; } }}
	break;
	case 129:
#line 1469 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tCONSTANT);
           cs = 440; {p++; goto _out; } }}
	break;
	case 130:
#line 1473 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tIDENTIFIER);
           cs = 440; {p++; goto _out; } }}
	break;
	case 131:
#line 1477 "cc/lexer.rl"
	{te = p;p--;{ p = ts - 1;
           cs = 766; { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}} }}
	break;
	case 132:
#line 1486 "cc/lexer.rl"
	{te = p;p--;{ emit_table(PUNCTUATION);
           cs = 440; {p++; goto _out; } }}
	break;
	case 133:
#line 1493 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 537; goto _again;} }}
	break;
	case 134:
#line 1505 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 135:
#line 1508 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 766; goto _again;} }}
	break;
	case 136:
#line 1486 "cc/lexer.rl"
	{{p = ((te))-1;}{ emit_table(PUNCTUATION);
           cs = 440; {p++; goto _out; } }}
	break;
	case 137:
#line 1508 "cc/lexer.rl"
	{{p = ((te))-1;}{ p--; {cs = 766; goto _again;} }}
	break;
	case 138:
#line 1 "NONE"
	{	switch( act ) {
	case 39:
	{{p = ((te))-1;} emit_table(KEYWORDS_BEGIN);
           cs = 440; {p++; goto _out; } }
	break;
	case 40:
	{{p = ((te))-1;} emit(token_type::tCONSTANT);
           cs = 440; {p++; goto _out; } }
	break;
	case 41:
	{{p = ((te))-1;} emit(token_type::tIDENTIFIER);
           cs = 440; {p++; goto _out; } }
	break;
	}
	}
	break;
	case 139:
#line 1520 "cc/lexer.rl"
	{te = p+1;{ emit(token_type::tLABEL, tok(ts, te - 2), ts, te - 1);
           p--; cs = 751; {p++; goto _out; } }}
	break;
	case 140:
#line 1526 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 766; goto _again;} }}
	break;
	case 141:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 142:
#line 1523 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 143:
#line 1526 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 766; goto _again;} }}
	break;
	case 144:
#line 1526 "cc/lexer.rl"
	{{p = ((te))-1;}{ p--; {cs = 766; goto _again;} }}
	break;
	case 145:
#line 1552 "cc/lexer.rl"
	{te = p+1;{ emit_table(PUNCTUATION);
           cs = 468; {p++; goto _out; } }}
	break;
	case 146:
#line 1558 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 766; goto _again;} }}
	break;
	case 147:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 148:
#line 1537 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tCONSTANT);
           cs = (arg_or_cmdarg()); {p++; goto _out; } }}
	break;
	case 149:
#line 1541 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tIDENTIFIER);
           cs = (arg_or_cmdarg()); {p++; goto _out; } }}
	break;
	case 150:
#line 1545 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tFID, tok(ts, tm), ts, tm);
           cs = (arg_or_cmdarg()); p = tm - 1; {p++; goto _out; } }}
	break;
	case 151:
#line 1552 "cc/lexer.rl"
	{te = p;p--;{ emit_table(PUNCTUATION);
           cs = 468; {p++; goto _out; } }}
	break;
	case 152:
#line 1555 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 153:
#line 1558 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 766; goto _again;} }}
	break;
	case 154:
#line 1634 "cc/lexer.rl"
	{act = 67;}
	break;
	case 155:
#line 1647 "cc/lexer.rl"
	{act = 68;}
	break;
	case 156:
#line 1685 "cc/lexer.rl"
	{act = 73;}
	break;
	case 157:
#line 1690 "cc/lexer.rl"
	{act = 74;}
	break;
	case 158:
#line 1616 "cc/lexer.rl"
	{te = p+1;{
        // Unlike expr_beg as invoked in the next rule, do not warn
        p = ts - 1;
        {cs = 766; goto _again;}
      }}
	break;
	case 159:
#line 1634 "cc/lexer.rl"
	{te = p+1;{
        if (*tm == '/') {
          // Ambiguous regexp literal.
          diagnostic_(dlevel::WARNING, dclass::AmbiguousLiteral, range(tm, tm + 1));
        }

        p = tm - 1;
        {cs = 537; goto _again;}
      }}
	break;
	case 160:
#line 1657 "cc/lexer.rl"
	{te = p+1;{ p--; p--; {cs = 537; goto _again;} }}
	break;
	case 161:
#line 1665 "cc/lexer.rl"
	{te = p+1;{ p = ts - 1; {cs = 537; goto _again;} }}
	break;
	case 162:
#line 1674 "cc/lexer.rl"
	{te = p+1;{ p = tm - 1; {cs = 766; goto _again;} }}
	break;
	case 163:
#line 1685 "cc/lexer.rl"
	{te = p+1;{
        p = ts - 1;
        {cs = 766; goto _again;}
      }}
	break;
	case 164:
#line 1699 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 537; goto _again;} }}
	break;
	case 165:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 166:
#line 1574 "cc/lexer.rl"
	{te = p;p--;{
        if (version == ruby_version::RUBY_18) {
          emit(token_type::tLPAREN2, "(", te - 1, te);
          cs = 758; {p++; goto _out; }
        } else {
          emit(token_type::tLPAREN_ARG, "(", te - 1, te);
          cs = 537; {p++; goto _out; }
        }
      }}
	break;
	case 167:
#line 1587 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tLPAREN2, "(");
           cs = 537; {p++; goto _out; } }}
	break;
	case 168:
#line 1593 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tLBRACK, "[", te - 1, te);
           cs = 537; {p++; goto _out; } }}
	break;
	case 169:
#line 1599 "cc/lexer.rl"
	{te = p;p--;{
        if (!lambda_stack.empty() && lambda_stack.top() == paren_nest) {
          p = ts - 1;
          {cs = 766; goto _again;}
        } else {
          emit(token_type::tLCURLY, "{", te - 1, te);
          cs = 758; {p++; goto _out; }
        }
      }}
	break;
	case 170:
#line 1625 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 537; goto _again;} }}
	break;
	case 171:
#line 1647 "cc/lexer.rl"
	{te = p;p--;{
        diagnostic_(dlevel::WARNING, dclass::AmbiguousPrefix, range(tm, te), tok(tm, te));

        p = tm - 1;
        {cs = 537; goto _again;}
      }}
	break;
	case 172:
#line 1662 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 537; goto _again;} }}
	break;
	case 173:
#line 1685 "cc/lexer.rl"
	{te = p;p--;{
        p = ts - 1;
        {cs = 766; goto _again;}
      }}
	break;
	case 174:
#line 1690 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 175:
#line 1693 "cc/lexer.rl"
	{te = p;p--;{ {cs = 766; goto _again;} }}
	break;
	case 176:
#line 1696 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 766; goto _again;} }}
	break;
	case 177:
#line 1699 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 537; goto _again;} }}
	break;
	case 178:
#line 1690 "cc/lexer.rl"
	{{p = ((te))-1;}}
	break;
	case 179:
#line 1699 "cc/lexer.rl"
	{{p = ((te))-1;}{ p--; {cs = 537; goto _again;} }}
	break;
	case 180:
#line 1 "NONE"
	{	switch( act ) {
	case 67:
	{{p = ((te))-1;}
        if (*tm == '/') {
          // Ambiguous regexp literal.
          diagnostic_(dlevel::WARNING, dclass::AmbiguousLiteral, range(tm, tm + 1));
        }

        p = tm - 1;
        {cs = 537; goto _again;}
      }
	break;
	case 68:
	{{p = ((te))-1;}
        diagnostic_(dlevel::WARNING, dclass::AmbiguousPrefix, range(tm, te), tok(tm, te));

        p = tm - 1;
        {cs = 537; goto _again;}
      }
	break;
	case 73:
	{{p = ((te))-1;}
        p = ts - 1;
        {cs = 766; goto _again;}
      }
	break;
	default:
	{{p = ((te))-1;}}
	break;
	}
	}
	break;
	case 181:
#line 1723 "cc/lexer.rl"
	{act = 80;}
	break;
	case 182:
#line 1736 "cc/lexer.rl"
	{act = 81;}
	break;
	case 183:
#line 1736 "cc/lexer.rl"
	{te = p+1;{ p = ts - 1;
           {cs = 468; goto _again;} }}
	break;
	case 184:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 185:
#line 1712 "cc/lexer.rl"
	{te = p;p--;{
        emit(token_type::tLPAREN_ARG, "(", te - 1, te);

        if (version == ruby_version::RUBY_18) {
          cs = 758; {p++; goto _out; }
        } else {
          cs = 537; {p++; goto _out; }
        }
      }}
	break;
	case 186:
#line 1736 "cc/lexer.rl"
	{te = p;p--;{ p = ts - 1;
           {cs = 468; goto _again;} }}
	break;
	case 187:
#line 1736 "cc/lexer.rl"
	{{p = ((te))-1;}{ p = ts - 1;
           {cs = 468; goto _again;} }}
	break;
	case 188:
#line 1 "NONE"
	{	switch( act ) {
	case 80:
	{{p = ((te))-1;}
        if (cond.active()) {
          emit(token_type::kDO_COND, "do", te - 2, te);
        } else {
          emit(token_type::kDO, "do", te - 2, te);
        }
        cs = 758; {p++; goto _out; }
      }
	break;
	case 81:
	{{p = ((te))-1;} p = ts - 1;
           {cs = 468; goto _again;} }
	break;
	}
	}
	break;
	case 189:
#line 1770 "cc/lexer.rl"
	{te = p+1;{ emit_do(true);
           cs = 758; {p++; goto _out; } }}
	break;
	case 190:
#line 1776 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 766; goto _again;} }}
	break;
	case 191:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 192:
#line 1759 "cc/lexer.rl"
	{te = p;p--;{
        if (!lambda_stack.empty() && lambda_stack.top() == paren_nest) {
          lambda_stack.pop();
          emit(token_type::tLAMBEG, "{");
        } else {
          emit(token_type::tLBRACE_ARG, "{");
        }
        cs = 758;
      }}
	break;
	case 193:
#line 1773 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 194:
#line 1776 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 766; goto _again;} }}
	break;
	case 195:
#line 1788 "cc/lexer.rl"
	{act = 88;}
	break;
	case 196:
#line 1792 "cc/lexer.rl"
	{act = 89;}
	break;
	case 197:
#line 1800 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 537; goto _again;} }}
	break;
	case 198:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 199:
#line 1792 "cc/lexer.rl"
	{te = p;p--;{ p = ts - 1; {cs = 537; goto _again;} }}
	break;
	case 200:
#line 1794 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 201:
#line 1797 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 766; goto _again;} }}
	break;
	case 202:
#line 1800 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 537; goto _again;} }}
	break;
	case 203:
#line 1 "NONE"
	{	switch( act ) {
	case 88:
	{{p = ((te))-1;} emit_table(KEYWORDS);
           cs = 537; {p++; goto _out; } }
	break;
	case 89:
	{{p = ((te))-1;} p = ts - 1; {cs = 537; goto _again;} }
	break;
	}
	}
	break;
	case 204:
#line 2061 "cc/lexer.rl"
	{act = 111;}
	break;
	case 205:
#line 2067 "cc/lexer.rl"
	{act = 112;}
	break;
	case 206:
#line 2073 "cc/lexer.rl"
	{act = 113;}
	break;
	case 207:
#line 2115 "cc/lexer.rl"
	{act = 115;}
	break;
	case 208:
#line 1404 "cc/lexer.rl"
	{act = 116;}
	break;
	case 209:
#line 2143 "cc/lexer.rl"
	{act = 119;}
	break;
	case 210:
#line 1817 "cc/lexer.rl"
	{te = p+1;{
        p--;
        if (*ts == '-') {
          emit(token_type::tUMINUS_NUM, "-", ts, ts + 1);
          cs = 766; {p++; goto _out; }
        }
      }}
	break;
	case 211:
#line 1837 "cc/lexer.rl"
	{te = p+1;{
        p--; {cs = (push_literal(literal_type::SLASH_REGEXP, std::string(ts + 0, 1), ts)); goto _again;}
      }}
	break;
	case 212:
#line 1843 "cc/lexer.rl"
	{te = p+1;{
        {cs = (push_literal(literal_type::PERCENT_STRING, std::string(ts + 1, 1), ts)); goto _again;}
      }}
	break;
	case 213:
#line 1849 "cc/lexer.rl"
	{te = p+1;{
        literal_type type;

        bool single_char_type = (ts + 3 == te);

        if (single_char_type && ts[1] == 'q') {
          type = literal_type::LOWERQ_STRING;
        } else if (single_char_type && ts[1] == 'Q') {
          type = literal_type::UPPERQ_STRING;
        } else if (single_char_type && ts[1] == 'w') {
          type = literal_type::LOWERW_WORDS;
        } else if (single_char_type && ts[1] == 'W') {
          type = literal_type::UPPERW_WORDS;
        } else if (single_char_type && ts[1] == 'i') {
          type = literal_type::LOWERI_SYMBOLS;
        } else if (single_char_type && ts[1] == 'I') {
          type = literal_type::UPPERI_SYMBOLS;
        } else if (single_char_type && ts[1] == 's') {
          type = literal_type::LOWERS_SYMBOL;
        } else if (single_char_type && ts[1] == 'r') {
          type = literal_type::PERCENT_REGEXP;
        } else if (single_char_type && ts[1] == 'x') {
          type = literal_type::LOWERX_XSTRING;
        } else {
          type = literal_type::PERCENT_STRING;
          diagnostic_(dlevel::ERROR, dclass::UnexpectedPercentStr, range(ts, te - 1), tok(ts, te-1));
        }

        {cs = (push_literal(type, std::string(te - 1, 1), ts)); goto _again;}
      }}
	break;
	case 214:
#line 1958 "cc/lexer.rl"
	{te = p+1;{
        literal_type type;

        if (ts[1] == '\'') {
          type = literal_type::SQUOTE_SYMBOL;
        } else { // '"'
          type = literal_type::DQUOTE_SYMBOL;
        }

        {cs = (push_literal(type, std::string(ts + 1, 1), ts)); goto _again;}
      }}
	break;
	case 215:
#line 1979 "cc/lexer.rl"
	{te = p+1;{
        emit(token_type::tSYMBOL, tok(ts + 1), ts, te);
        cs = 766; {p++; goto _out; }
      }}
	break;
	case 216:
#line 2004 "cc/lexer.rl"
	{te = p+1;{
        static const std::map<char, std::string> escape_map {
          { ' ',  "\\s" },
          { '\r', "\\r" },
          { '\n', "\\n" },
          { '\t', "\\t" },
          { '\v', "\\v" },
          { '\f', "\\f" },
        };

        auto& escape = escape_map.at(ts[1]);
        diagnostic_(dlevel::WARNING, dclass::InvalidEscapeUse, escape);

        p = ts - 1;
        {cs = 766; goto _again;}
      }}
	break;
	case 217:
#line 2022 "cc/lexer.rl"
	{te = p+1;{
        diagnostic_(dlevel::FATAL, dclass::IncompleteEscape, range(ts, ts + 1));
      }}
	break;
	case 218:
#line 2061 "cc/lexer.rl"
	{te = p+1;{ emit_table(PUNCTUATION_BEGIN);
           {p++; goto _out; } }}
	break;
	case 219:
#line 2081 "cc/lexer.rl"
	{te = p+1;{
        p--;

        if (version == ruby_version::RUBY_18) {
          auto ident = tok(ts, te - 2);

          if (*ts >= 'A' && *ts <= 'Z') {
            emit(token_type::tCONSTANT, ident, ts, te - 2);
          } else {
            emit(token_type::tIDENTIFIER, ident, ts, te - 2);
          }
          p--; // continue as a symbol

          if (is_declared(ident)) {
            cs = 766;
          } else {
            cs = (arg_or_cmdarg());
          }
        } else {
          emit(token_type::tLABEL, tok(ts, te - 2), ts, te - 1);
          cs = 751;
        }

        {p++; goto _out; }
      }}
	break;
	case 220:
#line 2130 "cc/lexer.rl"
	{te = p+1;{ p = ts - 1;
           {cs = 165; goto _again;} }}
	break;
	case 221:
#line 2143 "cc/lexer.rl"
	{te = p+1;{ p = ts - 1; {cs = 766; goto _again;} }}
	break;
	case 222:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 223:
#line 1827 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tSTAR, "*");
           {p++; goto _out; } }}
	break;
	case 224:
#line 1849 "cc/lexer.rl"
	{te = p;p--;{
        literal_type type;

        bool single_char_type = (ts + 3 == te);

        if (single_char_type && ts[1] == 'q') {
          type = literal_type::LOWERQ_STRING;
        } else if (single_char_type && ts[1] == 'Q') {
          type = literal_type::UPPERQ_STRING;
        } else if (single_char_type && ts[1] == 'w') {
          type = literal_type::LOWERW_WORDS;
        } else if (single_char_type && ts[1] == 'W') {
          type = literal_type::UPPERW_WORDS;
        } else if (single_char_type && ts[1] == 'i') {
          type = literal_type::LOWERI_SYMBOLS;
        } else if (single_char_type && ts[1] == 'I') {
          type = literal_type::UPPERI_SYMBOLS;
        } else if (single_char_type && ts[1] == 's') {
          type = literal_type::LOWERS_SYMBOL;
        } else if (single_char_type && ts[1] == 'r') {
          type = literal_type::PERCENT_REGEXP;
        } else if (single_char_type && ts[1] == 'x') {
          type = literal_type::LOWERX_XSTRING;
        } else {
          type = literal_type::PERCENT_STRING;
          diagnostic_(dlevel::ERROR, dclass::UnexpectedPercentStr, range(ts, te - 1), tok(ts, te-1));
        }

        {cs = (push_literal(type, std::string(te - 1, 1), ts)); goto _again;}
      }}
	break;
	case 225:
#line 1881 "cc/lexer.rl"
	{te = p;p--;{
        diagnostic_(dlevel::FATAL, dclass::StringEof, range(ts, ts + 1));
      }}
	break;
	case 226:
#line 1895 "cc/lexer.rl"
	{te = p;p--;{
        bool indent;
        bool dedent_body;

        const char* delim_s = ts + 2;
        const char* delim_e = heredoc_e;

        if (*delim_s == '-') {
          indent = true;
          dedent_body = false;
          delim_s++;
        } else if (*delim_s == '~') {
          indent = true;
          dedent_body = true;
          delim_s++;
        } else {
          indent = false;
          dedent_body = false;
        }

        literal_type type;

        if (*delim_s == '"') {
          type = literal_type::DQUOTE_HEREDOC;
          delim_s++;
          delim_e--;
        } else if (*delim_s == '\'') {
          type = literal_type::SQUOTE_HEREDOC;
          delim_s++;
          delim_e--;
        } else if (*delim_s == '`') {
          type = literal_type::BACKTICK_HEREDOC;
          delim_s++;
          delim_e--;
        } else {
          type = literal_type::DQUOTE_HEREDOC;
        }

        if (dedent_body && (version == ruby_version::RUBY_18 ||
                            version == ruby_version::RUBY_19 ||
                            version == ruby_version::RUBY_20 ||
                            version == ruby_version::RUBY_21 ||
                            version == ruby_version::RUBY_22)) {
          emit(token_type::tLSHFT, "<<", ts, ts + 2);
          p = ts + 1;
          cs = 537; {p++; goto _out; }
        } else {
          cs = (push_literal(type, std::string(delim_s, (size_t)(delim_e - delim_s)), ts, heredoc_e, indent, dedent_body));

          if (!herebody_s) {
            herebody_s = new_herebody_s;
          }

          p = herebody_s - 1;
        }
      }}
	break;
	case 227:
#line 1971 "cc/lexer.rl"
	{te = p;p--;{
        emit(token_type::tSYMBOL, tok(ts + 1, tm), ts, tm);
        p = tm - 1;
        cs = 766; {p++; goto _out; }
      }}
	break;
	case 228:
#line 1979 "cc/lexer.rl"
	{te = p;p--;{
        emit(token_type::tSYMBOL, tok(ts + 1), ts, te);
        cs = 766; {p++; goto _out; }
      }}
	break;
	case 229:
#line 1993 "cc/lexer.rl"
	{te = p;p--;{
        if (version == ruby_version::RUBY_18) {
          emit(token_type::tINTEGER, std::to_string(static_cast<unsigned char>(ts[1])));
        } else {
          emit(token_type::tCHARACTER, escape ? *escape : tok(ts + 1));
        }

        cs = 766; {p++; goto _out; }
      }}
	break;
	case 230:
#line 2022 "cc/lexer.rl"
	{te = p;p--;{
        diagnostic_(dlevel::FATAL, dclass::IncompleteEscape, range(ts, ts + 1));
      }}
	break;
	case 231:
#line 2028 "cc/lexer.rl"
	{te = p;p--;{
        p = ts - 1;
        {cs = 766; goto _again;}
      }}
	break;
	case 232:
#line 2039 "cc/lexer.rl"
	{te = p;p--;{
        if (!lambda_stack.empty() && lambda_stack.top() == paren_nest) {
          lambda_stack.pop();
          emit(token_type::tLAMBEG, "{");
        } else {
          emit(token_type::tLBRACE, "{");
        }
        {p++; goto _out; }
      }}
	break;
	case 233:
#line 2051 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tLBRACK, "[");
           {p++; goto _out; } }}
	break;
	case 234:
#line 2056 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tLPAREN, "(");
           {p++; goto _out; } }}
	break;
	case 235:
#line 2061 "cc/lexer.rl"
	{te = p;p--;{ emit_table(PUNCTUATION_BEGIN);
           {p++; goto _out; } }}
	break;
	case 236:
#line 2067 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::kRESCUE, "rescue", ts, tm);
           p = tm - 1;
           cs = 513; {p++; goto _out; } }}
	break;
	case 237:
#line 2115 "cc/lexer.rl"
	{te = p;p--;{ p = ts - 1;
           {cs = 766; goto _again;} }}
	break;
	case 238:
#line 1404 "cc/lexer.rl"
	{te = p;p--;{
    auto ident = tok();

    emit(token_type::tIDENTIFIER, ident);

    if (is_declared(ident)) {
      cs = 440; {p++; goto _out; }
    } else {
      cs = (arg_or_cmdarg()); {p++; goto _out; }
    }
  }}
	break;
	case 239:
#line 2127 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 240:
#line 2130 "cc/lexer.rl"
	{te = p;p--;{ p = ts - 1;
           {cs = 165; goto _again;} }}
	break;
	case 241:
#line 2143 "cc/lexer.rl"
	{te = p;p--;{ p = ts - 1; {cs = 766; goto _again;} }}
	break;
	case 242:
#line 1881 "cc/lexer.rl"
	{{p = ((te))-1;}{
        diagnostic_(dlevel::FATAL, dclass::StringEof, range(ts, ts + 1));
      }}
	break;
	case 243:
#line 1993 "cc/lexer.rl"
	{{p = ((te))-1;}{
        if (version == ruby_version::RUBY_18) {
          emit(token_type::tINTEGER, std::to_string(static_cast<unsigned char>(ts[1])));
        } else {
          emit(token_type::tCHARACTER, escape ? *escape : tok(ts + 1));
        }

        cs = 766; {p++; goto _out; }
      }}
	break;
	case 244:
#line 2127 "cc/lexer.rl"
	{{p = ((te))-1;}}
	break;
	case 245:
#line 2143 "cc/lexer.rl"
	{{p = ((te))-1;}{ p = ts - 1; {cs = 766; goto _again;} }}
	break;
	case 246:
#line 1 "NONE"
	{	switch( act ) {
	case 111:
	{{p = ((te))-1;} emit_table(PUNCTUATION_BEGIN);
           {p++; goto _out; } }
	break;
	case 112:
	{{p = ((te))-1;} emit(token_type::kRESCUE, "rescue", ts, tm);
           p = tm - 1;
           cs = 513; {p++; goto _out; } }
	break;
	case 113:
	{{p = ((te))-1;} emit_table(KEYWORDS_BEGIN);
           cs = 758; {p++; goto _out; } }
	break;
	case 115:
	{{p = ((te))-1;} p = ts - 1;
           {cs = 766; goto _again;} }
	break;
	case 116:
	{{p = ((te))-1;}
    auto ident = tok();

    emit(token_type::tIDENTIFIER, ident);

    if (is_declared(ident)) {
      cs = 440; {p++; goto _out; }
    } else {
      cs = (arg_or_cmdarg()); {p++; goto _out; }
    }
  }
	break;
	case 119:
	{{p = ((te))-1;} p = ts - 1; {cs = 766; goto _again;} }
	break;
	}
	}
	break;
	case 247:
#line 2163 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 537; goto _again;} }}
	break;
	case 248:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 249:
#line 2151 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 250:
#line 2154 "cc/lexer.rl"
	{te = p;p--;{
      if (in_kwarg) {
        p--; {cs = 766; goto _again;}
      } else {
        {cs = 165; goto _again;}
      }
    }}
	break;
	case 251:
#line 2163 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 537; goto _again;} }}
	break;
	case 252:
#line 2173 "cc/lexer.rl"
	{te = p+1;{ p = ts - 1;
           {cs = 766; goto _again;} }}
	break;
	case 253:
#line 2178 "cc/lexer.rl"
	{te = p+1;{
        literal_type type;

        if (ts[0] == '\'') {
          type = literal_type::SQUOTE_STRING;
        } else { // '"'
          type = literal_type::DQUOTE_STRING;
        }

        {cs = (push_literal(type, tok(), ts)); goto _again;}
      }}
	break;
	case 254:
#line 2196 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 537; goto _again;} }}
	break;
	case 255:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 256:
#line 2190 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 257:
#line 2193 "cc/lexer.rl"
	{te = p;p--;{ {cs = 165; goto _again;} }}
	break;
	case 258:
#line 2196 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 537; goto _again;} }}
	break;
	case 259:
#line 2196 "cc/lexer.rl"
	{{p = ((te))-1;}{ p--; {cs = 537; goto _again;} }}
	break;
	case 260:
#line 2215 "cc/lexer.rl"
	{act = 132;}
	break;
	case 261:
#line 2240 "cc/lexer.rl"
	{act = 133;}
	break;
	case 262:
#line 2244 "cc/lexer.rl"
	{act = 134;}
	break;
	case 263:
#line 2250 "cc/lexer.rl"
	{act = 135;}
	break;
	case 264:
#line 2255 "cc/lexer.rl"
	{act = 136;}
	break;
	case 265:
#line 2259 "cc/lexer.rl"
	{act = 137;}
	break;
	case 266:
#line 2263 "cc/lexer.rl"
	{act = 138;}
	break;
	case 267:
#line 2274 "cc/lexer.rl"
	{act = 139;}
	break;
	case 268:
#line 2290 "cc/lexer.rl"
	{act = 140;}
	break;
	case 269:
#line 2304 "cc/lexer.rl"
	{act = 141;}
	break;
	case 270:
#line 2337 "cc/lexer.rl"
	{act = 143;}
	break;
	case 271:
#line 2347 "cc/lexer.rl"
	{act = 144;}
	break;
	case 272:
#line 2360 "cc/lexer.rl"
	{act = 145;}
	break;
	case 273:
#line 2397 "cc/lexer.rl"
	{act = 147;}
	break;
	case 274:
#line 1404 "cc/lexer.rl"
	{act = 151;}
	break;
	case 275:
#line 2419 "cc/lexer.rl"
	{act = 152;}
	break;
	case 276:
#line 2207 "cc/lexer.rl"
	{te = p+1;{
        emit(token_type::tLAMBDA, "->", ts, ts + 2);

        lambda_stack.push(paren_nest);
        cs = 440; {p++; goto _out; }
      }}
	break;
	case 277:
#line 2244 "cc/lexer.rl"
	{te = p+1;{ emit(token_type::kCLASS, "class", ts, ts + 5);
           emit(token_type::tLSHFT, "<<",    te - 2, te);
           cs = 758; {p++; goto _out; } }}
	break;
	case 278:
#line 2378 "cc/lexer.rl"
	{te = p+1;{
        literal_type type;

        if (ts[0] == '`') {
          type = literal_type::BACKTICK_XSTRING;
        } else if (ts[0] == '\'') {
          type = literal_type::SQUOTE_STRING;
        } else { // '"'
          type = literal_type::DQUOTE_STRING;
        }

        {cs = (push_literal(type, std::string(te - 1, 1), ts, nullptr, false, false, true)); goto _again;}
      }}
	break;
	case 279:
#line 2405 "cc/lexer.rl"
	{te = p+1;{ p = ts - 1; { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}} }}
	break;
	case 280:
#line 2412 "cc/lexer.rl"
	{te = p+1;{ emit_table(PUNCTUATION);
           cs = 447; {p++; goto _out; } }}
	break;
	case 281:
#line 2439 "cc/lexer.rl"
	{te = p+1;{ emit_table(PUNCTUATION);
           cs = 537; {p++; goto _out; } }}
	break;
	case 282:
#line 2443 "cc/lexer.rl"
	{te = p+1;{
        emit_table(PUNCTUATION);
        cond.lexpop(); cmdarg.lexpop();

        if (ts[0] == '}' || ts[0] == ']') {
          cs = 505;
        } else { // ')'
          // this was commented out in the original lexer.rl:
          // fnext expr_endfn; ?
        }

        {p++; goto _out; }
      }}
	break;
	case 283:
#line 2458 "cc/lexer.rl"
	{te = p+1;{ emit(token_type::tOP_ASGN, tok(ts, te - 1));
           cs = 537; {p++; goto _out; } }}
	break;
	case 284:
#line 2462 "cc/lexer.rl"
	{te = p+1;{ emit(token_type::tEH, "?");
           cs = 758; {p++; goto _out; } }}
	break;
	case 285:
#line 2470 "cc/lexer.rl"
	{te = p+1;{ emit_table(PUNCTUATION);
           cs = 537; {p++; goto _out; } }}
	break;
	case 286:
#line 2483 "cc/lexer.rl"
	{te = p+1;{ emit(token_type::tSEMI, ";");
           cs = 758; {p++; goto _out; } }}
	break;
	case 287:
#line 2486 "cc/lexer.rl"
	{te = p+1;{
        diagnostic_(dlevel::ERROR, dclass::BareBackslash, range(ts, ts + 1));
        p--;
      }}
	break;
	case 288:
#line 2492 "cc/lexer.rl"
	{te = p+1;{
        diagnostic_(dlevel::ERROR, dclass::Unexpected, tok());
      }}
	break;
	case 289:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 290:
#line 2215 "cc/lexer.rl"
	{te = p;p--;{
        if (!lambda_stack.empty() && lambda_stack.top() == paren_nest) {
          lambda_stack.pop();

          if (ts[0] == '{') {
            emit(token_type::tLAMBEG, "{");
          } else { // 'do'
            emit(token_type::kDO_LAMBDA, "do");
          }
        } else {
          if (ts[0] == '{') {
            emit(token_type::tLCURLY, "{");
          } else { // 'do'
            emit_do();
          }
        }

        cs = 758; {p++; goto _out; }
      }}
	break;
	case 291:
#line 2240 "cc/lexer.rl"
	{te = p;p--;{ emit_table(KEYWORDS);
           cs = 327; {p++; goto _out; } }}
	break;
	case 292:
#line 2244 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::kCLASS, "class", ts, ts + 5);
           emit(token_type::tLSHFT, "<<",    te - 2, te);
           cs = 758; {p++; goto _out; } }}
	break;
	case 293:
#line 2255 "cc/lexer.rl"
	{te = p;p--;{ emit_table(KEYWORDS);
           cs = 758; {p++; goto _out; } }}
	break;
	case 294:
#line 2304 "cc/lexer.rl"
	{te = p;p--;{
        auto digits = tok(num_digits_s, num_suffix_s);

        if (num_suffix_s[-1] == '_') {
          diagnostic_(dlevel::ERROR, dclass::TrailingInNumber, range(te - 1, te), "_");
        } else if (num_digits_s == num_suffix_s && num_base == 8 && version == ruby_version::RUBY_18) {
          // 1.8 did not raise an error on 0o.
        } else if (num_digits_s == num_suffix_s) {
          diagnostic_(dlevel::ERROR, dclass::EmptyNumeric);
        } else if (num_base == 8) {
          for (const char* digit_p = num_digits_s; digit_p < num_suffix_s; digit_p++) {
            if (*digit_p == '8' || *digit_p == '9') {
              diagnostic_(dlevel::ERROR, dclass::InvalidOctal,
                range(digit_p, digit_p + 1));
            }
          }
        }

        if (version == ruby_version::RUBY_18 || version == ruby_version::RUBY_19 || version == ruby_version::RUBY_20) {
          emit(token_type::tINTEGER, digits, ts, num_suffix_s);
          p = num_suffix_s - 1;
        } else {
          emit_num(digits);
        }
        {p++; goto _out; }
      }}
	break;
	case 295:
#line 2332 "cc/lexer.rl"
	{te = p;p--;{
        diagnostic_(dlevel::ERROR, dclass::NoDotDigitLiteral);
      }}
	break;
	case 296:
#line 2360 "cc/lexer.rl"
	{te = p;p--;{
        auto digits = tok(ts, num_suffix_s);

        if (version == ruby_version::RUBY_18 || version == ruby_version::RUBY_19 || version == ruby_version::RUBY_20) {
          emit(token_type::tFLOAT, digits, ts, num_suffix_s);
          p = num_suffix_s - 1;
        } else {
          emit_num(digits);
        }
        {p++; goto _out; }
      }}
	break;
	case 297:
#line 2397 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tCONSTANT);
           cs = (arg_or_cmdarg()); {p++; goto _out; } }}
	break;
	case 298:
#line 2401 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tCONSTANT, tok(ts, tm), ts, tm);
           p = tm - 1; {p++; goto _out; } }}
	break;
	case 299:
#line 2405 "cc/lexer.rl"
	{te = p;p--;{ p = ts - 1; { check_stack_capacity(); {stack[top++] = cs; cs = 322; goto _again;}} }}
	break;
	case 300:
#line 2412 "cc/lexer.rl"
	{te = p;p--;{ emit_table(PUNCTUATION);
           cs = 447; {p++; goto _out; } }}
	break;
	case 301:
#line 1404 "cc/lexer.rl"
	{te = p;p--;{
    auto ident = tok();

    emit(token_type::tIDENTIFIER, ident);

    if (is_declared(ident)) {
      cs = 440; {p++; goto _out; }
    } else {
      cs = (arg_or_cmdarg()); {p++; goto _out; }
    }
  }}
	break;
	case 302:
#line 2419 "cc/lexer.rl"
	{te = p;p--;{
        if (tm == te) {
          // Suffix was consumed, e.g. foo!
          emit(token_type::tFID);
        } else {
          // Suffix was not consumed, e.g. foo!=
          emit(token_type::tIDENTIFIER, tok(ts, tm), ts, tm);
          p = tm - 1;
        }
        cs = 468; {p++; goto _out; }
      }}
	break;
	case 303:
#line 2439 "cc/lexer.rl"
	{te = p;p--;{ emit_table(PUNCTUATION);
           cs = 537; {p++; goto _out; } }}
	break;
	case 304:
#line 2443 "cc/lexer.rl"
	{te = p;p--;{
        emit_table(PUNCTUATION);
        cond.lexpop(); cmdarg.lexpop();

        if (ts[0] == '}' || ts[0] == ']') {
          cs = 505;
        } else { // ')'
          // this was commented out in the original lexer.rl:
          // fnext expr_endfn; ?
        }

        {p++; goto _out; }
      }}
	break;
	case 305:
#line 2466 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tLBRACK2, "[");
           cs = 537; {p++; goto _out; } }}
	break;
	case 306:
#line 2470 "cc/lexer.rl"
	{te = p;p--;{ emit_table(PUNCTUATION);
           cs = 537; {p++; goto _out; } }}
	break;
	case 307:
#line 2477 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 308:
#line 2480 "cc/lexer.rl"
	{te = p;p--;{ {cs = 939; goto _again;} }}
	break;
	case 309:
#line 2492 "cc/lexer.rl"
	{te = p;p--;{
        diagnostic_(dlevel::ERROR, dclass::Unexpected, tok());
      }}
	break;
	case 310:
#line 2332 "cc/lexer.rl"
	{{p = ((te))-1;}{
        diagnostic_(dlevel::ERROR, dclass::NoDotDigitLiteral);
      }}
	break;
	case 311:
#line 2492 "cc/lexer.rl"
	{{p = ((te))-1;}{
        diagnostic_(dlevel::ERROR, dclass::Unexpected, tok());
      }}
	break;
	case 312:
#line 1 "NONE"
	{	switch( act ) {
	case 132:
	{{p = ((te))-1;}
        if (!lambda_stack.empty() && lambda_stack.top() == paren_nest) {
          lambda_stack.pop();

          if (ts[0] == '{') {
            emit(token_type::tLAMBEG, "{");
          } else { // 'do'
            emit(token_type::kDO_LAMBDA, "do");
          }
        } else {
          if (ts[0] == '{') {
            emit(token_type::tLCURLY, "{");
          } else { // 'do'
            emit_do();
          }
        }

        cs = 758; {p++; goto _out; }
      }
	break;
	case 133:
	{{p = ((te))-1;} emit_table(KEYWORDS);
           cs = 327; {p++; goto _out; } }
	break;
	case 134:
	{{p = ((te))-1;} emit(token_type::kCLASS, "class", ts, ts + 5);
           emit(token_type::tLSHFT, "<<",    te - 2, te);
           cs = 758; {p++; goto _out; } }
	break;
	case 135:
	{{p = ((te))-1;} emit_table(KEYWORDS);
           cs = 537; {p++; goto _out; } }
	break;
	case 136:
	{{p = ((te))-1;} emit_table(KEYWORDS);
           cs = 758; {p++; goto _out; } }
	break;
	case 137:
	{{p = ((te))-1;} emit_table(KEYWORDS);
           cs = 513; {p++; goto _out; } }
	break;
	case 138:
	{{p = ((te))-1;}
        emit_table(KEYWORDS);

        if (version == ruby_version::RUBY_18 && ts + 3 == te && ts[0] == 'n' && ts[1] == 'o' && ts[2] == 't') {
          cs = 537; {p++; goto _out; }
        } else {
          cs = 468; {p++; goto _out; }
        }
      }
	break;
	case 139:
	{{p = ((te))-1;}
        if (version == ruby_version::RUBY_18) {
          auto ident = tok();

          emit(token_type::tIDENTIFIER, ident);

          if (!is_declared(ident)) {
            cs = (arg_or_cmdarg());
          }
        } else {
          emit(token_type::k__ENCODING__, "__ENCODING__");
        }
        {p++; goto _out; }
      }
	break;
	case 140:
	{{p = ((te))-1;} emit_table(KEYWORDS);
           {p++; goto _out; } }
	break;
	case 141:
	{{p = ((te))-1;}
        auto digits = tok(num_digits_s, num_suffix_s);

        if (num_suffix_s[-1] == '_') {
          diagnostic_(dlevel::ERROR, dclass::TrailingInNumber, range(te - 1, te), "_");
        } else if (num_digits_s == num_suffix_s && num_base == 8 && version == ruby_version::RUBY_18) {
          // 1.8 did not raise an error on 0o.
        } else if (num_digits_s == num_suffix_s) {
          diagnostic_(dlevel::ERROR, dclass::EmptyNumeric);
        } else if (num_base == 8) {
          for (const char* digit_p = num_digits_s; digit_p < num_suffix_s; digit_p++) {
            if (*digit_p == '8' || *digit_p == '9') {
              diagnostic_(dlevel::ERROR, dclass::InvalidOctal,
                range(digit_p, digit_p + 1));
            }
          }
        }

        if (version == ruby_version::RUBY_18 || version == ruby_version::RUBY_19 || version == ruby_version::RUBY_20) {
          emit(token_type::tINTEGER, digits, ts, num_suffix_s);
          p = num_suffix_s - 1;
        } else {
          emit_num(digits);
        }
        {p++; goto _out; }
      }
	break;
	case 143:
	{{p = ((te))-1;}
        if (version == ruby_version::RUBY_18 || version == ruby_version::RUBY_19 || version == ruby_version::RUBY_20) {
          diagnostic_(dlevel::ERROR, dclass::TrailingInNumber, range(te - 1, te), tok(te-1, te));
        } else {
          emit(token_type::tINTEGER, tok(ts, te - 1), ts, te - 1);
          p--; {p++; goto _out; }
        }
      }
	break;
	case 144:
	{{p = ((te))-1;}
        if (version == ruby_version::RUBY_18 || version == ruby_version::RUBY_19 || version == ruby_version::RUBY_20) {
          diagnostic_(dlevel::ERROR, dclass::TrailingInNumber, range(te - 1, te), tok(te - 1, te));
        } else {
          emit(token_type::tFLOAT, tok(ts, te - 1), ts, te - 1);
          p--; {p++; goto _out; }
        }
      }
	break;
	case 145:
	{{p = ((te))-1;}
        auto digits = tok(ts, num_suffix_s);

        if (version == ruby_version::RUBY_18 || version == ruby_version::RUBY_19 || version == ruby_version::RUBY_20) {
          emit(token_type::tFLOAT, digits, ts, num_suffix_s);
          p = num_suffix_s - 1;
        } else {
          emit_num(digits);
        }
        {p++; goto _out; }
      }
	break;
	case 147:
	{{p = ((te))-1;} emit(token_type::tCONSTANT);
           cs = (arg_or_cmdarg()); {p++; goto _out; } }
	break;
	case 151:
	{{p = ((te))-1;}
    auto ident = tok();

    emit(token_type::tIDENTIFIER, ident);

    if (is_declared(ident)) {
      cs = 440; {p++; goto _out; }
    } else {
      cs = (arg_or_cmdarg()); {p++; goto _out; }
    }
  }
	break;
	case 152:
	{{p = ((te))-1;}
        if (tm == te) {
          // Suffix was consumed, e.g. foo!
          emit(token_type::tFID);
        } else {
          // Suffix was not consumed, e.g. foo!=
          emit(token_type::tIDENTIFIER, tok(ts, tm), ts, tm);
          p = tm - 1;
        }
        cs = 468; {p++; goto _out; }
      }
	break;
	}
	}
	break;
	case 313:
#line 2504 "cc/lexer.rl"
	{te = p+1;{ p = tm - 1; {cs = 766; goto _again;} }}
	break;
	case 314:
#line 2507 "cc/lexer.rl"
	{te = p+1;{ emit(token_type::tNL, std::string(), newline_s, newline_s + 1);
           p--; cs = 165; {p++; goto _out; } }}
	break;
	case 315:
#line 2507 "cc/lexer.rl"
	{te = p;p--;{ emit(token_type::tNL, std::string(), newline_s, newline_s + 1);
           p--; cs = 165; {p++; goto _out; } }}
	break;
	case 316:
#line 2507 "cc/lexer.rl"
	{{p = ((te))-1;}{ emit(token_type::tNL, std::string(), newline_s, newline_s + 1);
           p--; cs = 165; {p++; goto _out; } }}
	break;
	case 317:
#line 2517 "cc/lexer.rl"
	{te = p+1;{
        emit_comment(eq_begin_s, te);
        {cs = 165; goto _again;}
      }}
	break;
	case 318:
#line 2522 "cc/lexer.rl"
	{te = p+1;}
	break;
	case 319:
#line 2517 "cc/lexer.rl"
	{te = p;p--;{
        emit_comment(eq_begin_s, te);
        {cs = 165; goto _again;}
      }}
	break;
	case 320:
#line 2525 "cc/lexer.rl"
	{te = p;p--;{
        diagnostic_(dlevel::FATAL, dclass::EmbeddedDocument,
          range(eq_begin_s, eq_begin_s + "=begin"s.size()));
      }}
	break;
	case 321:
#line 2535 "cc/lexer.rl"
	{te = p+1;{ eq_begin_s = ts;
           {cs = 942; goto _again;} }}
	break;
	case 322:
#line 2539 "cc/lexer.rl"
	{te = p+1;{ p = pe - 3; }}
	break;
	case 323:
#line 2542 "cc/lexer.rl"
	{te = p+1;{ p--; {cs = 758; goto _again;} }}
	break;
	case 324:
#line 641 "cc/lexer.rl"
	{te = p+1;{
    // Sit at EOF indefinitely. #advance would return $eof each time.
    // This allows to feed the lexer more data if needed; this is only used
    // in tests.
    //
    // Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    // below. This is due to the fact that scanner state at EOF is observed
    // by tests, and encapsulating it in a rule would break the introspection.
    p--; {p++; goto _out; }
  }}
	break;
	case 325:
#line 2532 "cc/lexer.rl"
	{te = p;p--;}
	break;
	case 326:
#line 2535 "cc/lexer.rl"
	{te = p;p--;{ eq_begin_s = ts;
           {cs = 942; goto _again;} }}
	break;
	case 327:
#line 2542 "cc/lexer.rl"
	{te = p;p--;{ p--; {cs = 758; goto _again;} }}
	break;
	case 328:
#line 2542 "cc/lexer.rl"
	{{p = ((te))-1;}{ p--; {cs = 758; goto _again;} }}
	break;
#line 7611 "cc/lexer.cc"
		}
	}

_again:
	_acts = _lex_actions + _lex_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 59:
#line 1 "NONE"
	{ts = 0;}
	break;
#line 7624 "cc/lexer.cc"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lex_eof_trans[cs] > 0 ) {
		_trans = _lex_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 444 "cc/lexer.rl"

  _p = p;

  if (!token_queue.empty()) {
    token_t token = token_queue.front();
    token_queue.pop();
    return token;
  }

  if (cs == lex_error) {
    size_t start = (size_t)(p - source_buffer.data());
    return mempool.alloc(token_type::error, start, start + 1, std::string(p - 1, 1));
  }

  return mempool.alloc(token_type::eof, source_buffer.size(), source_buffer.size(), "");
}

void lexer::emit(token_type type) {
  emit(type, tok());
}

void lexer::emit(token_type type, const std::string& str) {
  emit(type, str, ts, te);
}

void lexer::emit(token_type type, const std::string& str, const char* start, const char* end) {
  size_t offset_start = (size_t)(start - source_buffer.data());
  size_t offset_end = (size_t)(end - source_buffer.data());

  token_queue.push(mempool.alloc(type, offset_start, offset_end, str));
}

void lexer::emit_do(bool do_block) {
  if (cond.active()) {
    emit(token_type::kDO_COND, "do");
  } else if (cmdarg.active() || do_block) {
    emit(token_type::kDO_BLOCK, "do");
  } else {
    emit(token_type::kDO, "do");
  }
}

void lexer::emit_table(const token_table& table) {
  auto value = tok();
  emit(table.at(value), value);
}

void lexer::emit_num(const std::string& num) {
  switch (num_xfrm) {
    case num_xfrm_type::NONE:
      emit(token_type::tINTEGER, num);
      break;
    case num_xfrm_type::RATIONAL:
      emit(token_type::tRATIONAL, num);
      break;
    case num_xfrm_type::IMAGINARY:
      emit(token_type::tIMAGINARY, num);
      break;
    case num_xfrm_type::RATIONAL_IMAGINARY:
      emit(token_type::tRATIONAL_IMAGINARY, num);
      break;
    case num_xfrm_type::FLOAT:
      emit(token_type::tFLOAT, num);
      break;
    case num_xfrm_type::FLOAT_IMAGINARY:
      emit(token_type::tFLOAT_IMAGINARY, num);
      break;
  }
}

diagnostic::range lexer::range(const char *start, const char *end) {
  size_t token_start = (size_t)(start - source_buffer.data());
  size_t token_end = (size_t)(end - source_buffer.data());
  return diagnostic::range(token_start, token_end);
}

void lexer::diagnostic_(dlevel level, dclass type, const std::string &data) {
  diagnostics.emplace_back(level, type, range(ts, te), data);
}

void lexer::diagnostic_(dlevel level, dclass type, diagnostic::range &&range, const std::string &data) {
  diagnostics.emplace_back(level, type, range, data);
}

//
// === LITERAL STACK ===
//

template<typename... Args>
int lexer::push_literal(Args&&... args) {
  literal_stack.emplace(*this, std::forward<Args>(args)...);

  auto& literal = literal_stack.top();

  if (literal.words() && literal.backslash_delimited()) {
    if (literal.interpolate()) {
      return lex_en_interp_backslash_delimited_words;
    } else {
      return lex_en_plain_backslash_delimited_words;
    }
  } else if (literal.words() && !literal.backslash_delimited()) {
    if (literal.interpolate()) {
      return lex_en_interp_words;
    } else {
      return lex_en_plain_words;
    }
  } else if (!literal.words() && literal.backslash_delimited()) {
    if (literal.interpolate()) {
      return lex_en_interp_backslash_delimited;
    } else {
      return lex_en_plain_backslash_delimited;
    }
  } else {
    if (literal.interpolate()) {
      return lex_en_interp_string;
    } else {
      return lex_en_plain_string;
    }
  }
}

literal& lexer::literal_() {
  return literal_stack.top();
}

int lexer::pop_literal() {
  bool was_regexp;

  {
    auto& old_literal = literal_stack.top();

    was_regexp = old_literal.regexp();
    dedent_level_ = old_literal.dedent_level();
  }

  literal_stack.pop();

  if (was_regexp) {
    return lex_en_regexp_modifiers;
  } else {
    return lex_en_expr_end;
  }
}

void lexer::set_state_expr_beg() {
  cs = lex_en_expr_beg;
}

void lexer::set_state_expr_endarg() {
  cs = lex_en_expr_endarg;
}

void lexer::set_state_expr_fname() {
  cs = lex_en_expr_fname;
}

void lexer::set_state_expr_value() {
  cs = lex_en_expr_value;
}


#line 2547 "cc/lexer.rl"


token_t lexer::advance() {
  auto tok = advance_();
  last_token_s = tok->start();
  last_token_e = tok->end();
  return tok;
}

void lexer::extend_static() {
  static_env.emplace();
}

void lexer::extend_dynamic() {
  if (static_env.empty()) {
    static_env.emplace();
  } else {
    environment& env = static_env.top();
    static_env.push(env);
  }
}

void lexer::unextend() {
  static_env.pop();
}

void lexer::declare(const std::string& name) {
  static_env.top().insert(name);
}

bool lexer::is_declared(const std::string& identifier) const {
  const environment& env = static_env.top();

  return env.find(identifier) != env.end();
}

optional_size lexer::dedent_level() {
  // We erase @dedent_level as a precaution to avoid accidentally
  // using a stale value.
  auto ret = dedent_level_;
  dedent_level_ = std::nullopt;
  return ret;
}
